# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fDpy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fDpy')
    _fDpy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fDpy', [dirname(__file__)])
        except ImportError:
            import _fDpy
            return _fDpy
        try:
            _mod = imp.load_module('_fDpy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fDpy = swig_import_helper()
    del swig_import_helper
else:
    import _fDpy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def fd_sess_fromsid(string):
    return _fDpy.fd_sess_fromsid(string)
fd_sess_fromsid = _fDpy.fd_sess_fromsid
FD_PROJECT_BINARY = _fDpy.FD_PROJECT_BINARY
FD_PROJECT_NAME = _fDpy.FD_PROJECT_NAME
FD_PROJECT_VERSION_MAJOR = _fDpy.FD_PROJECT_VERSION_MAJOR
FD_PROJECT_VERSION_MINOR = _fDpy.FD_PROJECT_VERSION_MINOR
FD_PROJECT_VERSION_REV = _fDpy.FD_PROJECT_VERSION_REV
FD_PROJECT_VERSION_API = _fDpy.FD_PROJECT_VERSION_API
FD_PROJECT_COPYRIGHT = _fDpy.FD_PROJECT_COPYRIGHT
DEFAULT_CONF_PATH = _fDpy.DEFAULT_CONF_PATH
DEFAULT_EXTENSIONS_PATH = _fDpy.DEFAULT_EXTENSIONS_PATH
FD_DEFAULT_CONF_FILENAME = _fDpy.FD_DEFAULT_CONF_FILENAME
FD_HOOK_HANDLE_LIMIT = _fDpy.FD_HOOK_HANDLE_LIMIT
DIAMETER_PORT = _fDpy.DIAMETER_PORT
DIAMETER_SECURE_PORT = _fDpy.DIAMETER_SECURE_PORT

def fd_libproto_init():
    return _fDpy.fd_libproto_init()
fd_libproto_init = _fDpy.fd_libproto_init

def fd_libproto_fini():
    return _fDpy.fd_libproto_fini()
fd_libproto_fini = _fDpy.fd_libproto_fini

def fd_log(arg1, arg2):
    return _fDpy.fd_log(arg1, arg2)
fd_log = _fDpy.fd_log

def fd_log_threadname(name):
    return _fDpy.fd_log_threadname(name)
fd_log_threadname = _fDpy.fd_log_threadname

def fd_log_time(ts, buf, len, incl_date, incl_ms):
    return _fDpy.fd_log_time(ts, buf, len, incl_date, incl_ms)
fd_log_time = _fDpy.fd_log_time

def fd_log_handler_register(logger):
    return _fDpy.fd_log_handler_register(logger)
fd_log_handler_register = _fDpy.fd_log_handler_register

def fd_log_handler_unregister():
    return _fDpy.fd_log_handler_unregister()
fd_log_handler_unregister = _fDpy.fd_log_handler_unregister

def fd_dump_extend(format):
    return _fDpy.fd_dump_extend(format)
fd_dump_extend = _fDpy.fd_dump_extend

def fd_dump_extend_hexdump(data, datalen, trunc, wrap):
    return _fDpy.fd_dump_extend_hexdump(data, datalen, trunc, wrap)
fd_dump_extend_hexdump = _fDpy.fd_dump_extend_hexdump
FD_LOG_ANNOYING = _fDpy.FD_LOG_ANNOYING
FD_LOG_DEBUG = _fDpy.FD_LOG_DEBUG
FD_LOG_NOTICE = _fDpy.FD_LOG_NOTICE
FD_LOG_ERROR = _fDpy.FD_LOG_ERROR
FD_LOG_FATAL = _fDpy.FD_LOG_FATAL
__func__ = _fDpy.__func__
__PRETTY_FUNCTION__ = _fDpy.__PRETTY_FUNCTION__

def file_bname_init(full):
    return _fDpy.file_bname_init(full)
file_bname_init = _fDpy.file_bname_init
STD_TRACE_FMT_STRING = _fDpy.STD_TRACE_FMT_STRING

def fd_breakhere():
    return _fDpy.fd_breakhere()
fd_breakhere = _fDpy.fd_breakhere
NONE = _fDpy.NONE
INFO = _fDpy.INFO
FULL = _fDpy.FULL
ANNOYING = _fDpy.ANNOYING
FCTS = _fDpy.FCTS
CALL = _fDpy.CALL

def old_TRACE_BOOL(level, file, func):
    return _fDpy.old_TRACE_BOOL(level, file, func)
old_TRACE_BOOL = _fDpy.old_TRACE_BOOL

def fd_log_deprecated(level, format):
    return _fDpy.fd_log_deprecated(level, format)
fd_log_deprecated = _fDpy.fd_log_deprecated

def replace_me():
    return _fDpy.replace_me()
replace_me = _fDpy.replace_me

def fd_sa_dump(sa, flags):
    return _fDpy.fd_sa_dump(sa, flags)
fd_sa_dump = _fDpy.fd_sa_dump

def fd_sa_sdump_numeric(buf, sa):
    return _fDpy.fd_sa_sdump_numeric(buf, sa)
fd_sa_sdump_numeric = _fDpy.fd_sa_sdump_numeric
BUFSIZ = _fDpy.BUFSIZ

def fd_os_hash(string):
    return _fDpy.fd_os_hash(string)
fd_os_hash = _fDpy.fd_os_hash

def os0dup_int(s, l):
    return _fDpy.os0dup_int(s, l)
os0dup_int = _fDpy.os0dup_int

def fd_os_is_valid_os0(os, oslen):
    return _fDpy.fd_os_is_valid_os0(os, oslen)
fd_os_is_valid_os0 = _fDpy.fd_os_is_valid_os0
HOST_NAME_MAX = _fDpy.HOST_NAME_MAX

def fd_os_is_valid_DiameterIdentity(os, ossz):
    return _fDpy.fd_os_is_valid_DiameterIdentity(os, ossz)
fd_os_is_valid_DiameterIdentity = _fDpy.fd_os_is_valid_DiameterIdentity

def fd_os_validate_DiameterIdentity(id, inoutsz, memory):
    return _fDpy.fd_os_validate_DiameterIdentity(id, inoutsz, memory)
fd_os_validate_DiameterIdentity = _fDpy.fd_os_validate_DiameterIdentity

def fd_os_cmp_int(os1, os1sz, os2, os2sz):
    return _fDpy.fd_os_cmp_int(os1, os1sz, os2, os2sz)
fd_os_cmp_int = _fDpy.fd_os_cmp_int

def fd_os_almostcasesrch_int(os1, os1sz, os2, os2sz, maybefurther):
    return _fDpy.fd_os_almostcasesrch_int(os1, os1sz, os2, os2sz, maybefurther)
fd_os_almostcasesrch_int = _fDpy.fd_os_almostcasesrch_int

def fd_os_parse_DiameterURI(uri, urisz, diamid, diamidlen, secure, port, transport, proto):
    return _fDpy.fd_os_parse_DiameterURI(uri, urisz, diamid, diamidlen, secure, port, transport, proto)
fd_os_parse_DiameterURI = _fDpy.fd_os_parse_DiameterURI

def fd_thr_term(th):
    return _fDpy.fd_thr_term(th)
fd_thr_term = _fDpy.fd_thr_term

def fd_cleanup_mutex(mutex):
    return _fDpy.fd_cleanup_mutex(mutex)
fd_cleanup_mutex = _fDpy.fd_cleanup_mutex

def fd_cleanup_rwlock(rwlock):
    return _fDpy.fd_cleanup_rwlock(rwlock)
fd_cleanup_rwlock = _fDpy.fd_cleanup_rwlock

def fd_cleanup_buffer(buffer):
    return _fDpy.fd_cleanup_buffer(buffer)
fd_cleanup_buffer = _fDpy.fd_cleanup_buffer

def fd_cleanup_socket(sockptr):
    return _fDpy.fd_cleanup_socket(sockptr)
fd_cleanup_socket = _fDpy.fd_cleanup_socket
class fd_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _fDpy.fd_list_next_set
    __swig_getmethods__["next"] = _fDpy.fd_list_next_get
    if _newclass:
        next = _swig_property(_fDpy.fd_list_next_get, _fDpy.fd_list_next_set)
    __swig_setmethods__["prev"] = _fDpy.fd_list_prev_set
    __swig_getmethods__["prev"] = _fDpy.fd_list_prev_get
    if _newclass:
        prev = _swig_property(_fDpy.fd_list_prev_get, _fDpy.fd_list_prev_set)
    __swig_setmethods__["head"] = _fDpy.fd_list_head_set
    __swig_getmethods__["head"] = _fDpy.fd_list_head_get
    if _newclass:
        head = _swig_property(_fDpy.fd_list_head_get, _fDpy.fd_list_head_set)
    __swig_setmethods__["o"] = _fDpy.fd_list_o_set
    __swig_getmethods__["o"] = _fDpy.fd_list_o_get
    if _newclass:
        o = _swig_property(_fDpy.fd_list_o_get, _fDpy.fd_list_o_set)

    def __init__(self, o=None):
        this = _fDpy.new_fd_list(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_list
    __del__ = lambda self: None

    def dump(self):
        return _fDpy.fd_list_dump(self)

    def insert_prev(self, li):
        return _fDpy.fd_list_insert_prev(self, li)

    def insert_next(self, li):
        return _fDpy.fd_list_insert_next(self, li)

    def isempty(self):
        return _fDpy.fd_list_isempty(self)

    def concat(self, li):
        return _fDpy.fd_list_concat(self, li)

    def detach(self):
        return _fDpy.fd_list_detach(self)

    def enum_as(self, type=None, dont_use_o=0):
        return _fDpy.fd_list_enum_as(self, type, dont_use_o)
fd_list_swigregister = _fDpy.fd_list_swigregister
fd_list_swigregister(fd_list)
cvar = _fDpy.cvar
fd_libproto_version = cvar.fd_libproto_version


def fd_list_init(list, obj):
    return _fDpy.fd_list_init(list, obj)
fd_list_init = _fDpy.fd_list_init

def fd_list_insert_after(ref, item):
    return _fDpy.fd_list_insert_after(ref, item)
fd_list_insert_after = _fDpy.fd_list_insert_after

def fd_list_insert_before(ref, item):
    return _fDpy.fd_list_insert_before(ref, item)
fd_list_insert_before = _fDpy.fd_list_insert_before

def fd_list_move_end(ref, senti):
    return _fDpy.fd_list_move_end(ref, senti)
fd_list_move_end = _fDpy.fd_list_move_end

def fd_list_insert_ordered(head, item, cmp_fct, ref_duplicate):
    return _fDpy.fd_list_insert_ordered(head, item, cmp_fct, ref_duplicate)
fd_list_insert_ordered = _fDpy.fd_list_insert_ordered

def fd_list_unlink(item):
    return _fDpy.fd_list_unlink(item)
fd_list_unlink = _fDpy.fd_list_unlink
DICT_VENDOR = _fDpy.DICT_VENDOR
DICT_APPLICATION = _fDpy.DICT_APPLICATION
DICT_TYPE = _fDpy.DICT_TYPE
DICT_ENUMVAL = _fDpy.DICT_ENUMVAL
DICT_AVP = _fDpy.DICT_AVP
DICT_COMMAND = _fDpy.DICT_COMMAND
DICT_RULE = _fDpy.DICT_RULE

def fd_dict_init(dict):
    return _fDpy.fd_dict_init(dict)
fd_dict_init = _fDpy.fd_dict_init

def fd_dict_fini(dict):
    return _fDpy.fd_dict_fini(dict)
fd_dict_fini = _fDpy.fd_dict_fini

def fd_dict_new(dict, type, data, parent, ref):
    return _fDpy.fd_dict_new(dict, type, data, parent, ref)
fd_dict_new = _fDpy.fd_dict_new

def fd_dict_search(dict, type, criteria, what, result, retval):
    return _fDpy.fd_dict_search(dict, type, criteria, what, result, retval)
fd_dict_search = _fDpy.fd_dict_search

def fd_dict_get_error_cmd(dict, obj):
    return _fDpy.fd_dict_get_error_cmd(dict, obj)
fd_dict_get_error_cmd = _fDpy.fd_dict_get_error_cmd

def fd_dict_getval(object, val):
    return _fDpy.fd_dict_getval(object, val)
fd_dict_getval = _fDpy.fd_dict_getval

def fd_dict_gettype(object, type):
    return _fDpy.fd_dict_gettype(object, type)
fd_dict_gettype = _fDpy.fd_dict_gettype

def fd_dict_getdict(object, dict):
    return _fDpy.fd_dict_getdict(object, dict)
fd_dict_getdict = _fDpy.fd_dict_getdict

def fd_dict_dump_object(obj):
    return _fDpy.fd_dict_dump_object(obj)
fd_dict_dump_object = _fDpy.fd_dict_dump_object

def fd_dict_dump(dict):
    return _fDpy.fd_dict_dump(dict)
fd_dict_dump = _fDpy.fd_dict_dump

def fd_dict_getlistof(criteria, parent, sentinel):
    return _fDpy.fd_dict_getlistof(criteria, parent, sentinel)
fd_dict_getlistof = _fDpy.fd_dict_getlistof

def fd_dict_delete(obj):
    return _fDpy.fd_dict_delete(obj)
fd_dict_delete = _fDpy.fd_dict_delete
class dict_vendor_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_vendor_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_vendor_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor_id"] = _fDpy.dict_vendor_data_vendor_id_set
    __swig_getmethods__["vendor_id"] = _fDpy.dict_vendor_data_vendor_id_get
    if _newclass:
        vendor_id = _swig_property(_fDpy.dict_vendor_data_vendor_id_get, _fDpy.dict_vendor_data_vendor_id_set)
    __swig_setmethods__["vendor_name"] = _fDpy.dict_vendor_data_vendor_name_set
    __swig_getmethods__["vendor_name"] = _fDpy.dict_vendor_data_vendor_name_get
    if _newclass:
        vendor_name = _swig_property(_fDpy.dict_vendor_data_vendor_name_get, _fDpy.dict_vendor_data_vendor_name_set)

    def __init__(self, id=0, name=None):
        this = _fDpy.new_dict_vendor_data(id, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_vendor_data
    __del__ = lambda self: None
dict_vendor_data_swigregister = _fDpy.dict_vendor_data_swigregister
dict_vendor_data_swigregister(dict_vendor_data)

VENDOR_BY_ID = _fDpy.VENDOR_BY_ID
VENDOR_BY_NAME = _fDpy.VENDOR_BY_NAME
VENDOR_OF_APPLICATION = _fDpy.VENDOR_OF_APPLICATION
VENDOR_OF_AVP = _fDpy.VENDOR_OF_AVP

def fd_dict_get_vendorid_list(dict):
    return _fDpy.fd_dict_get_vendorid_list(dict)
fd_dict_get_vendorid_list = _fDpy.fd_dict_get_vendorid_list
class dict_application_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_application_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_application_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["application_id"] = _fDpy.dict_application_data_application_id_set
    __swig_getmethods__["application_id"] = _fDpy.dict_application_data_application_id_get
    if _newclass:
        application_id = _swig_property(_fDpy.dict_application_data_application_id_get, _fDpy.dict_application_data_application_id_set)
    __swig_setmethods__["application_name"] = _fDpy.dict_application_data_application_name_set
    __swig_getmethods__["application_name"] = _fDpy.dict_application_data_application_name_get
    if _newclass:
        application_name = _swig_property(_fDpy.dict_application_data_application_name_get, _fDpy.dict_application_data_application_name_set)

    def __init__(self, id=0, name=None):
        this = _fDpy.new_dict_application_data(id, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_application_data
    __del__ = lambda self: None
dict_application_data_swigregister = _fDpy.dict_application_data_swigregister
dict_application_data_swigregister(dict_application_data)

APPLICATION_BY_ID = _fDpy.APPLICATION_BY_ID
APPLICATION_BY_NAME = _fDpy.APPLICATION_BY_NAME
APPLICATION_OF_TYPE = _fDpy.APPLICATION_OF_TYPE
APPLICATION_OF_COMMAND = _fDpy.APPLICATION_OF_COMMAND
class avp_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avp_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avp_value, name)
    __repr__ = _swig_repr
    __swig_getmethods__["os"] = _fDpy.avp_value_os_get
    if _newclass:
        os = _swig_property(_fDpy.avp_value_os_get)
    __swig_setmethods__["i32"] = _fDpy.avp_value_i32_set
    __swig_getmethods__["i32"] = _fDpy.avp_value_i32_get
    if _newclass:
        i32 = _swig_property(_fDpy.avp_value_i32_get, _fDpy.avp_value_i32_set)
    __swig_setmethods__["i64"] = _fDpy.avp_value_i64_set
    __swig_getmethods__["i64"] = _fDpy.avp_value_i64_get
    if _newclass:
        i64 = _swig_property(_fDpy.avp_value_i64_get, _fDpy.avp_value_i64_set)
    __swig_setmethods__["u32"] = _fDpy.avp_value_u32_set
    __swig_getmethods__["u32"] = _fDpy.avp_value_u32_get
    if _newclass:
        u32 = _swig_property(_fDpy.avp_value_u32_get, _fDpy.avp_value_u32_set)
    __swig_setmethods__["u64"] = _fDpy.avp_value_u64_set
    __swig_getmethods__["u64"] = _fDpy.avp_value_u64_get
    if _newclass:
        u64 = _swig_property(_fDpy.avp_value_u64_get, _fDpy.avp_value_u64_set)
    __swig_setmethods__["f32"] = _fDpy.avp_value_f32_set
    __swig_getmethods__["f32"] = _fDpy.avp_value_f32_get
    if _newclass:
        f32 = _swig_property(_fDpy.avp_value_f32_get, _fDpy.avp_value_f32_set)
    __swig_setmethods__["f64"] = _fDpy.avp_value_f64_set
    __swig_getmethods__["f64"] = _fDpy.avp_value_f64_get
    if _newclass:
        f64 = _swig_property(_fDpy.avp_value_f64_get, _fDpy.avp_value_f64_set)

    __swig_setmethods__["os"] = _fDpy.avp_value_os_set
    if _newclass:os = _swig_property(_fDpy.avp_value_os_get, _fDpy.avp_value_os_set)


    def os_set(self, *args):
        return _fDpy.avp_value_os_set(self, *args)

    def __init__(self):
        this = _fDpy.new_avp_value()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_avp_value
    __del__ = lambda self: None
avp_value_swigregister = _fDpy.avp_value_swigregister
avp_value_swigregister(avp_value)

class avp_value_os(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avp_value_os, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avp_value_os, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _fDpy.avp_value_os_data_set
    __swig_getmethods__["data"] = _fDpy.avp_value_os_data_get
    if _newclass:
        data = _swig_property(_fDpy.avp_value_os_data_get, _fDpy.avp_value_os_data_set)
    __swig_setmethods__["len"] = _fDpy.avp_value_os_len_set
    __swig_getmethods__["len"] = _fDpy.avp_value_os_len_get
    if _newclass:
        len = _swig_property(_fDpy.avp_value_os_len_get, _fDpy.avp_value_os_len_set)

    def dump(self):
        return _fDpy.avp_value_os_dump(self)

    def as_str(self):
        return _fDpy.avp_value_os_as_str(self)

    def __init__(self):
        this = _fDpy.new_avp_value_os()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_avp_value_os
    __del__ = lambda self: None
avp_value_os_swigregister = _fDpy.avp_value_os_swigregister
avp_value_os_swigregister(avp_value_os)

AVP_TYPE_GROUPED = _fDpy.AVP_TYPE_GROUPED
AVP_TYPE_OCTETSTRING = _fDpy.AVP_TYPE_OCTETSTRING
AVP_TYPE_INTEGER32 = _fDpy.AVP_TYPE_INTEGER32
AVP_TYPE_INTEGER64 = _fDpy.AVP_TYPE_INTEGER64
AVP_TYPE_UNSIGNED32 = _fDpy.AVP_TYPE_UNSIGNED32
AVP_TYPE_UNSIGNED64 = _fDpy.AVP_TYPE_UNSIGNED64
AVP_TYPE_FLOAT32 = _fDpy.AVP_TYPE_FLOAT32
AVP_TYPE_FLOAT64 = _fDpy.AVP_TYPE_FLOAT64
class dict_type_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_type_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_type_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_base"] = _fDpy.dict_type_data_type_base_set
    __swig_getmethods__["type_base"] = _fDpy.dict_type_data_type_base_get
    if _newclass:
        type_base = _swig_property(_fDpy.dict_type_data_type_base_get, _fDpy.dict_type_data_type_base_set)
    __swig_setmethods__["type_name"] = _fDpy.dict_type_data_type_name_set
    __swig_getmethods__["type_name"] = _fDpy.dict_type_data_type_name_get
    if _newclass:
        type_name = _swig_property(_fDpy.dict_type_data_type_name_get, _fDpy.dict_type_data_type_name_set)
    __swig_setmethods__["type_interpret"] = _fDpy.dict_type_data_type_interpret_set
    __swig_getmethods__["type_interpret"] = _fDpy.dict_type_data_type_interpret_get
    if _newclass:
        type_interpret = _swig_property(_fDpy.dict_type_data_type_interpret_get, _fDpy.dict_type_data_type_interpret_set)
    __swig_setmethods__["type_encode"] = _fDpy.dict_type_data_type_encode_set
    __swig_getmethods__["type_encode"] = _fDpy.dict_type_data_type_encode_get
    if _newclass:
        type_encode = _swig_property(_fDpy.dict_type_data_type_encode_get, _fDpy.dict_type_data_type_encode_set)
    __swig_setmethods__["type_dump"] = _fDpy.dict_type_data_type_dump_set
    __swig_getmethods__["type_dump"] = _fDpy.dict_type_data_type_dump_get
    if _newclass:
        type_dump = _swig_property(_fDpy.dict_type_data_type_dump_get, _fDpy.dict_type_data_type_dump_set)
    __swig_setmethods__["type_check"] = _fDpy.dict_type_data_type_check_set
    __swig_getmethods__["type_check"] = _fDpy.dict_type_data_type_check_get
    if _newclass:
        type_check = _swig_property(_fDpy.dict_type_data_type_check_get, _fDpy.dict_type_data_type_check_set)
    __swig_setmethods__["type_check_param"] = _fDpy.dict_type_data_type_check_param_set
    __swig_getmethods__["type_check_param"] = _fDpy.dict_type_data_type_check_param_get
    if _newclass:
        type_check_param = _swig_property(_fDpy.dict_type_data_type_check_param_get, _fDpy.dict_type_data_type_check_param_set)

    def __init__(self, base=0, name=None):
        this = _fDpy.new_dict_type_data(base, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_type_data
    __del__ = lambda self: None
dict_type_data_swigregister = _fDpy.dict_type_data_swigregister
dict_type_data_swigregister(dict_type_data)

TYPE_BY_NAME = _fDpy.TYPE_BY_NAME
TYPE_OF_ENUMVAL = _fDpy.TYPE_OF_ENUMVAL
TYPE_OF_AVP = _fDpy.TYPE_OF_AVP

def fd_dictfct_Address_encode(data, avp_value):
    return _fDpy.fd_dictfct_Address_encode(data, avp_value)
fd_dictfct_Address_encode = _fDpy.fd_dictfct_Address_encode

def fd_dictfct_Address_interpret(avp_value, interpreted):
    return _fDpy.fd_dictfct_Address_interpret(avp_value, interpreted)
fd_dictfct_Address_interpret = _fDpy.fd_dictfct_Address_interpret

def fd_dictfct_Address_dump(avp_value):
    return _fDpy.fd_dictfct_Address_dump(avp_value)
fd_dictfct_Address_dump = _fDpy.fd_dictfct_Address_dump

def fd_dictfct_UTF8String_dump(avp_value):
    return _fDpy.fd_dictfct_UTF8String_dump(avp_value)
fd_dictfct_UTF8String_dump = _fDpy.fd_dictfct_UTF8String_dump

def fd_dictfct_Time_encode(data, avp_value):
    return _fDpy.fd_dictfct_Time_encode(data, avp_value)
fd_dictfct_Time_encode = _fDpy.fd_dictfct_Time_encode

def fd_dictfct_Time_interpret(avp_value, interpreted):
    return _fDpy.fd_dictfct_Time_interpret(avp_value, interpreted)
fd_dictfct_Time_interpret = _fDpy.fd_dictfct_Time_interpret

def fd_dictfct_Time_dump(avp_value):
    return _fDpy.fd_dictfct_Time_dump(avp_value)
fd_dictfct_Time_dump = _fDpy.fd_dictfct_Time_dump

def fd_dictfct_CharInOS_check(data, val, error_msg):
    return _fDpy.fd_dictfct_CharInOS_check(data, val, error_msg)
fd_dictfct_CharInOS_check = _fDpy.fd_dictfct_CharInOS_check
class dict_enumval_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_enumval_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_enumval_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enum_name"] = _fDpy.dict_enumval_data_enum_name_set
    __swig_getmethods__["enum_name"] = _fDpy.dict_enumval_data_enum_name_get
    if _newclass:
        enum_name = _swig_property(_fDpy.dict_enumval_data_enum_name_get, _fDpy.dict_enumval_data_enum_name_set)
    __swig_setmethods__["enum_value"] = _fDpy.dict_enumval_data_enum_value_set
    __swig_getmethods__["enum_value"] = _fDpy.dict_enumval_data_enum_value_get
    if _newclass:
        enum_value = _swig_property(_fDpy.dict_enumval_data_enum_value_get, _fDpy.dict_enumval_data_enum_value_set)

    def __init__(self, name=None, v=0):
        this = _fDpy.new_dict_enumval_data(name, v)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_enumval_data
    __del__ = lambda self: None
dict_enumval_data_swigregister = _fDpy.dict_enumval_data_swigregister
dict_enumval_data_swigregister(dict_enumval_data)

ENUMVAL_BY_STRUCT = _fDpy.ENUMVAL_BY_STRUCT
ENUMVAL_BY_NAME = _fDpy.ENUMVAL_BY_NAME
ENUMVAL_BY_VALUE = _fDpy.ENUMVAL_BY_VALUE
class dict_enumval_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_enumval_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_enumval_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_obj"] = _fDpy.dict_enumval_request_type_obj_set
    __swig_getmethods__["type_obj"] = _fDpy.dict_enumval_request_type_obj_get
    if _newclass:
        type_obj = _swig_property(_fDpy.dict_enumval_request_type_obj_get, _fDpy.dict_enumval_request_type_obj_set)
    __swig_setmethods__["type_name"] = _fDpy.dict_enumval_request_type_name_set
    __swig_getmethods__["type_name"] = _fDpy.dict_enumval_request_type_name_get
    if _newclass:
        type_name = _swig_property(_fDpy.dict_enumval_request_type_name_get, _fDpy.dict_enumval_request_type_name_set)
    __swig_setmethods__["search"] = _fDpy.dict_enumval_request_search_set
    __swig_getmethods__["search"] = _fDpy.dict_enumval_request_search_get
    if _newclass:
        search = _swig_property(_fDpy.dict_enumval_request_search_get, _fDpy.dict_enumval_request_search_set)

    def __init__(self):
        this = _fDpy.new_dict_enumval_request()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_enumval_request
    __del__ = lambda self: None
dict_enumval_request_swigregister = _fDpy.dict_enumval_request_swigregister
dict_enumval_request_swigregister(dict_enumval_request)

AVP_FLAG_VENDOR = _fDpy.AVP_FLAG_VENDOR
AVP_FLAG_MANDATORY = _fDpy.AVP_FLAG_MANDATORY
AVP_FLAG_RESERVED3 = _fDpy.AVP_FLAG_RESERVED3
AVP_FLAG_RESERVED4 = _fDpy.AVP_FLAG_RESERVED4
AVP_FLAG_RESERVED5 = _fDpy.AVP_FLAG_RESERVED5
AVP_FLAG_RESERVED6 = _fDpy.AVP_FLAG_RESERVED6
AVP_FLAG_RESERVED7 = _fDpy.AVP_FLAG_RESERVED7
AVP_FLAG_RESERVED8 = _fDpy.AVP_FLAG_RESERVED8
DUMP_AVPFL_str = _fDpy.DUMP_AVPFL_str
class dict_avp_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_avp_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_avp_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avp_code"] = _fDpy.dict_avp_data_avp_code_set
    __swig_getmethods__["avp_code"] = _fDpy.dict_avp_data_avp_code_get
    if _newclass:
        avp_code = _swig_property(_fDpy.dict_avp_data_avp_code_get, _fDpy.dict_avp_data_avp_code_set)
    __swig_setmethods__["avp_vendor"] = _fDpy.dict_avp_data_avp_vendor_set
    __swig_getmethods__["avp_vendor"] = _fDpy.dict_avp_data_avp_vendor_get
    if _newclass:
        avp_vendor = _swig_property(_fDpy.dict_avp_data_avp_vendor_get, _fDpy.dict_avp_data_avp_vendor_set)
    __swig_setmethods__["avp_name"] = _fDpy.dict_avp_data_avp_name_set
    __swig_getmethods__["avp_name"] = _fDpy.dict_avp_data_avp_name_get
    if _newclass:
        avp_name = _swig_property(_fDpy.dict_avp_data_avp_name_get, _fDpy.dict_avp_data_avp_name_set)
    __swig_setmethods__["avp_flag_mask"] = _fDpy.dict_avp_data_avp_flag_mask_set
    __swig_getmethods__["avp_flag_mask"] = _fDpy.dict_avp_data_avp_flag_mask_get
    if _newclass:
        avp_flag_mask = _swig_property(_fDpy.dict_avp_data_avp_flag_mask_get, _fDpy.dict_avp_data_avp_flag_mask_set)
    __swig_setmethods__["avp_flag_val"] = _fDpy.dict_avp_data_avp_flag_val_set
    __swig_getmethods__["avp_flag_val"] = _fDpy.dict_avp_data_avp_flag_val_get
    if _newclass:
        avp_flag_val = _swig_property(_fDpy.dict_avp_data_avp_flag_val_get, _fDpy.dict_avp_data_avp_flag_val_set)
    __swig_setmethods__["avp_basetype"] = _fDpy.dict_avp_data_avp_basetype_set
    __swig_getmethods__["avp_basetype"] = _fDpy.dict_avp_data_avp_basetype_get
    if _newclass:
        avp_basetype = _swig_property(_fDpy.dict_avp_data_avp_basetype_get, _fDpy.dict_avp_data_avp_basetype_set)

    def __init__(self, code=0, name=None, basetype=0, vendor=0, mandatory=0):
        this = _fDpy.new_dict_avp_data(code, name, basetype, vendor, mandatory)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_avp_data
    __del__ = lambda self: None
dict_avp_data_swigregister = _fDpy.dict_avp_data_swigregister
dict_avp_data_swigregister(dict_avp_data)

AVP_BY_CODE = _fDpy.AVP_BY_CODE
AVP_BY_NAME = _fDpy.AVP_BY_NAME
AVP_BY_NAME_ALL_VENDORS = _fDpy.AVP_BY_NAME_ALL_VENDORS
AVP_BY_STRUCT = _fDpy.AVP_BY_STRUCT
AVP_BY_CODE_AND_VENDOR = _fDpy.AVP_BY_CODE_AND_VENDOR
AVP_BY_NAME_AND_VENDOR = _fDpy.AVP_BY_NAME_AND_VENDOR
class dict_avp_request_ex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_avp_request_ex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_avp_request_ex, name)
    __repr__ = _swig_repr
    __swig_getmethods__["avp_vendor"] = _fDpy.dict_avp_request_ex_avp_vendor_get
    if _newclass:
        avp_vendor = _swig_property(_fDpy.dict_avp_request_ex_avp_vendor_get)
    __swig_getmethods__["avp_data"] = _fDpy.dict_avp_request_ex_avp_data_get
    if _newclass:
        avp_data = _swig_property(_fDpy.dict_avp_request_ex_avp_data_get)

    def __init__(self):
        this = _fDpy.new_dict_avp_request_ex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_avp_request_ex
    __del__ = lambda self: None
dict_avp_request_ex_swigregister = _fDpy.dict_avp_request_ex_swigregister
dict_avp_request_ex_swigregister(dict_avp_request_ex)

class dict_avp_request_ex_avp_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_avp_request_ex_avp_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_avp_request_ex_avp_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avp_code"] = _fDpy.dict_avp_request_ex_avp_data_avp_code_set
    __swig_getmethods__["avp_code"] = _fDpy.dict_avp_request_ex_avp_data_avp_code_get
    if _newclass:
        avp_code = _swig_property(_fDpy.dict_avp_request_ex_avp_data_avp_code_get, _fDpy.dict_avp_request_ex_avp_data_avp_code_set)
    __swig_setmethods__["avp_name"] = _fDpy.dict_avp_request_ex_avp_data_avp_name_set
    __swig_getmethods__["avp_name"] = _fDpy.dict_avp_request_ex_avp_data_avp_name_get
    if _newclass:
        avp_name = _swig_property(_fDpy.dict_avp_request_ex_avp_data_avp_name_get, _fDpy.dict_avp_request_ex_avp_data_avp_name_set)

    def __init__(self):
        this = _fDpy.new_dict_avp_request_ex_avp_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_avp_request_ex_avp_data
    __del__ = lambda self: None
dict_avp_request_ex_avp_data_swigregister = _fDpy.dict_avp_request_ex_avp_data_swigregister
dict_avp_request_ex_avp_data_swigregister(dict_avp_request_ex_avp_data)

class dict_avp_request_ex_avp_vendor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_avp_request_ex_avp_vendor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_avp_request_ex_avp_vendor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_set
    __swig_getmethods__["vendor"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_get
    if _newclass:
        vendor = _swig_property(_fDpy.dict_avp_request_ex_avp_vendor_vendor_get, _fDpy.dict_avp_request_ex_avp_vendor_vendor_set)
    __swig_setmethods__["vendor_id"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_id_set
    __swig_getmethods__["vendor_id"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_id_get
    if _newclass:
        vendor_id = _swig_property(_fDpy.dict_avp_request_ex_avp_vendor_vendor_id_get, _fDpy.dict_avp_request_ex_avp_vendor_vendor_id_set)
    __swig_setmethods__["vendor_name"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_name_set
    __swig_getmethods__["vendor_name"] = _fDpy.dict_avp_request_ex_avp_vendor_vendor_name_get
    if _newclass:
        vendor_name = _swig_property(_fDpy.dict_avp_request_ex_avp_vendor_vendor_name_get, _fDpy.dict_avp_request_ex_avp_vendor_vendor_name_set)

    def __init__(self):
        this = _fDpy.new_dict_avp_request_ex_avp_vendor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_avp_request_ex_avp_vendor
    __del__ = lambda self: None
dict_avp_request_ex_avp_vendor_swigregister = _fDpy.dict_avp_request_ex_avp_vendor_swigregister
dict_avp_request_ex_avp_vendor_swigregister(dict_avp_request_ex_avp_vendor)

class dict_avp_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_avp_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_avp_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avp_vendor"] = _fDpy.dict_avp_request_avp_vendor_set
    __swig_getmethods__["avp_vendor"] = _fDpy.dict_avp_request_avp_vendor_get
    if _newclass:
        avp_vendor = _swig_property(_fDpy.dict_avp_request_avp_vendor_get, _fDpy.dict_avp_request_avp_vendor_set)
    __swig_setmethods__["avp_code"] = _fDpy.dict_avp_request_avp_code_set
    __swig_getmethods__["avp_code"] = _fDpy.dict_avp_request_avp_code_get
    if _newclass:
        avp_code = _swig_property(_fDpy.dict_avp_request_avp_code_get, _fDpy.dict_avp_request_avp_code_set)
    __swig_setmethods__["avp_name"] = _fDpy.dict_avp_request_avp_name_set
    __swig_getmethods__["avp_name"] = _fDpy.dict_avp_request_avp_name_get
    if _newclass:
        avp_name = _swig_property(_fDpy.dict_avp_request_avp_name_get, _fDpy.dict_avp_request_avp_name_set)

    def __init__(self):
        this = _fDpy.new_dict_avp_request()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_avp_request
    __del__ = lambda self: None
dict_avp_request_swigregister = _fDpy.dict_avp_request_swigregister
dict_avp_request_swigregister(dict_avp_request)

CMD_FLAG_REQUEST = _fDpy.CMD_FLAG_REQUEST
CMD_FLAG_PROXIABLE = _fDpy.CMD_FLAG_PROXIABLE
CMD_FLAG_ERROR = _fDpy.CMD_FLAG_ERROR
CMD_FLAG_RETRANSMIT = _fDpy.CMD_FLAG_RETRANSMIT
CMD_FLAG_RESERVED5 = _fDpy.CMD_FLAG_RESERVED5
CMD_FLAG_RESERVED6 = _fDpy.CMD_FLAG_RESERVED6
CMD_FLAG_RESERVED7 = _fDpy.CMD_FLAG_RESERVED7
CMD_FLAG_RESERVED8 = _fDpy.CMD_FLAG_RESERVED8
DUMP_CMDFL_str = _fDpy.DUMP_CMDFL_str
class dict_cmd_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_cmd_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_cmd_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_code"] = _fDpy.dict_cmd_data_cmd_code_set
    __swig_getmethods__["cmd_code"] = _fDpy.dict_cmd_data_cmd_code_get
    if _newclass:
        cmd_code = _swig_property(_fDpy.dict_cmd_data_cmd_code_get, _fDpy.dict_cmd_data_cmd_code_set)
    __swig_setmethods__["cmd_name"] = _fDpy.dict_cmd_data_cmd_name_set
    __swig_getmethods__["cmd_name"] = _fDpy.dict_cmd_data_cmd_name_get
    if _newclass:
        cmd_name = _swig_property(_fDpy.dict_cmd_data_cmd_name_get, _fDpy.dict_cmd_data_cmd_name_set)
    __swig_setmethods__["cmd_flag_mask"] = _fDpy.dict_cmd_data_cmd_flag_mask_set
    __swig_getmethods__["cmd_flag_mask"] = _fDpy.dict_cmd_data_cmd_flag_mask_get
    if _newclass:
        cmd_flag_mask = _swig_property(_fDpy.dict_cmd_data_cmd_flag_mask_get, _fDpy.dict_cmd_data_cmd_flag_mask_set)
    __swig_setmethods__["cmd_flag_val"] = _fDpy.dict_cmd_data_cmd_flag_val_set
    __swig_getmethods__["cmd_flag_val"] = _fDpy.dict_cmd_data_cmd_flag_val_get
    if _newclass:
        cmd_flag_val = _swig_property(_fDpy.dict_cmd_data_cmd_flag_val_get, _fDpy.dict_cmd_data_cmd_flag_val_set)

    def __init__(self, code=0, name=None, request=1):
        this = _fDpy.new_dict_cmd_data(code, name, request)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_cmd_data
    __del__ = lambda self: None
dict_cmd_data_swigregister = _fDpy.dict_cmd_data_swigregister
dict_cmd_data_swigregister(dict_cmd_data)

CMD_BY_NAME = _fDpy.CMD_BY_NAME
CMD_BY_CODE_R = _fDpy.CMD_BY_CODE_R
CMD_BY_CODE_A = _fDpy.CMD_BY_CODE_A
CMD_ANSWER = _fDpy.CMD_ANSWER
RULE_FIXED_HEAD = _fDpy.RULE_FIXED_HEAD
RULE_REQUIRED = _fDpy.RULE_REQUIRED
RULE_OPTIONAL = _fDpy.RULE_OPTIONAL
RULE_FIXED_TAIL = _fDpy.RULE_FIXED_TAIL
class dict_rule_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_rule_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_rule_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rule_avp"] = _fDpy.dict_rule_data_rule_avp_set
    __swig_getmethods__["rule_avp"] = _fDpy.dict_rule_data_rule_avp_get
    if _newclass:
        rule_avp = _swig_property(_fDpy.dict_rule_data_rule_avp_get, _fDpy.dict_rule_data_rule_avp_set)
    __swig_setmethods__["rule_position"] = _fDpy.dict_rule_data_rule_position_set
    __swig_getmethods__["rule_position"] = _fDpy.dict_rule_data_rule_position_get
    if _newclass:
        rule_position = _swig_property(_fDpy.dict_rule_data_rule_position_get, _fDpy.dict_rule_data_rule_position_set)
    __swig_setmethods__["rule_order"] = _fDpy.dict_rule_data_rule_order_set
    __swig_getmethods__["rule_order"] = _fDpy.dict_rule_data_rule_order_get
    if _newclass:
        rule_order = _swig_property(_fDpy.dict_rule_data_rule_order_get, _fDpy.dict_rule_data_rule_order_set)
    __swig_setmethods__["rule_min"] = _fDpy.dict_rule_data_rule_min_set
    __swig_getmethods__["rule_min"] = _fDpy.dict_rule_data_rule_min_get
    if _newclass:
        rule_min = _swig_property(_fDpy.dict_rule_data_rule_min_get, _fDpy.dict_rule_data_rule_min_set)
    __swig_setmethods__["rule_max"] = _fDpy.dict_rule_data_rule_max_set
    __swig_getmethods__["rule_max"] = _fDpy.dict_rule_data_rule_max_get
    if _newclass:
        rule_max = _swig_property(_fDpy.dict_rule_data_rule_max_get, _fDpy.dict_rule_data_rule_max_set)

    def __init__(self, avp=None, pos=0, min=-1, max=-1):
        this = _fDpy.new_dict_rule_data(avp, pos, min, max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_rule_data
    __del__ = lambda self: None
dict_rule_data_swigregister = _fDpy.dict_rule_data_swigregister
dict_rule_data_swigregister(dict_rule_data)

RULE_BY_AVP_AND_PARENT = _fDpy.RULE_BY_AVP_AND_PARENT
class dict_rule_request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_rule_request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_rule_request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rule_parent"] = _fDpy.dict_rule_request_rule_parent_set
    __swig_getmethods__["rule_parent"] = _fDpy.dict_rule_request_rule_parent_get
    if _newclass:
        rule_parent = _swig_property(_fDpy.dict_rule_request_rule_parent_get, _fDpy.dict_rule_request_rule_parent_set)
    __swig_setmethods__["rule_avp"] = _fDpy.dict_rule_request_rule_avp_set
    __swig_getmethods__["rule_avp"] = _fDpy.dict_rule_request_rule_avp_get
    if _newclass:
        rule_avp = _swig_property(_fDpy.dict_rule_request_rule_avp_get, _fDpy.dict_rule_request_rule_avp_set)

    def __init__(self):
        this = _fDpy.new_dict_rule_request()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dict_rule_request
    __del__ = lambda self: None
dict_rule_request_swigregister = _fDpy.dict_rule_request_swigregister
dict_rule_request_swigregister(dict_rule_request)

AI_RELAY = _fDpy.AI_RELAY
CC_CAPABILITIES_EXCHANGE = _fDpy.CC_CAPABILITIES_EXCHANGE
CC_RE_AUTH = _fDpy.CC_RE_AUTH
CC_ACCOUNTING = _fDpy.CC_ACCOUNTING
CC_ABORT_SESSION = _fDpy.CC_ABORT_SESSION
CC_SESSION_TERMINATION = _fDpy.CC_SESSION_TERMINATION
CC_DEVICE_WATCHDOG = _fDpy.CC_DEVICE_WATCHDOG
CC_DISCONNECT_PEER = _fDpy.CC_DISCONNECT_PEER
AC_USER_NAME = _fDpy.AC_USER_NAME
AC_PROXY_STATE = _fDpy.AC_PROXY_STATE
AC_HOST_IP_ADDRESS = _fDpy.AC_HOST_IP_ADDRESS
AC_AUTH_APPLICATION_ID = _fDpy.AC_AUTH_APPLICATION_ID
AC_ACCT_APPLICATION_ID = _fDpy.AC_ACCT_APPLICATION_ID
AC_VENDOR_SPECIFIC_APPLICATION_ID = _fDpy.AC_VENDOR_SPECIFIC_APPLICATION_ID
AC_REDIRECT_HOST_USAGE = _fDpy.AC_REDIRECT_HOST_USAGE
AC_REDIRECT_MAX_CACHE_TIME = _fDpy.AC_REDIRECT_MAX_CACHE_TIME
AC_SESSION_ID = _fDpy.AC_SESSION_ID
AC_ORIGIN_HOST = _fDpy.AC_ORIGIN_HOST
AC_SUPPORTED_VENDOR_ID = _fDpy.AC_SUPPORTED_VENDOR_ID
AC_VENDOR_ID = _fDpy.AC_VENDOR_ID
AC_FIRMWARE_REVISION = _fDpy.AC_FIRMWARE_REVISION
AC_RESULT_CODE = _fDpy.AC_RESULT_CODE
AC_PRODUCT_NAME = _fDpy.AC_PRODUCT_NAME
AC_DISCONNECT_CAUSE = _fDpy.AC_DISCONNECT_CAUSE
ACV_DC_REBOOTING = _fDpy.ACV_DC_REBOOTING
ACV_DC_BUSY = _fDpy.ACV_DC_BUSY
ACV_DC_NOT_FRIEND = _fDpy.ACV_DC_NOT_FRIEND
AC_ORIGIN_STATE_ID = _fDpy.AC_ORIGIN_STATE_ID
AC_FAILED_AVP = _fDpy.AC_FAILED_AVP
AC_PROXY_HOST = _fDpy.AC_PROXY_HOST
AC_ERROR_MESSAGE = _fDpy.AC_ERROR_MESSAGE
AC_ROUTE_RECORD = _fDpy.AC_ROUTE_RECORD
AC_DESTINATION_REALM = _fDpy.AC_DESTINATION_REALM
AC_PROXY_INFO = _fDpy.AC_PROXY_INFO
AC_REDIRECT_HOST = _fDpy.AC_REDIRECT_HOST
AC_DESTINATION_HOST = _fDpy.AC_DESTINATION_HOST
AC_ERROR_REPORTING_HOST = _fDpy.AC_ERROR_REPORTING_HOST
AC_ORIGIN_REALM = _fDpy.AC_ORIGIN_REALM
AC_INBAND_SECURITY_ID = _fDpy.AC_INBAND_SECURITY_ID
ACV_ISI_NO_INBAND_SECURITY = _fDpy.ACV_ISI_NO_INBAND_SECURITY
ACV_ISI_TLS = _fDpy.ACV_ISI_TLS
ER_DIAMETER_MULTI_ROUND_AUTH = _fDpy.ER_DIAMETER_MULTI_ROUND_AUTH
ER_DIAMETER_SUCCESS = _fDpy.ER_DIAMETER_SUCCESS
ER_DIAMETER_LIMITED_SUCCESS = _fDpy.ER_DIAMETER_LIMITED_SUCCESS
ER_DIAMETER_COMMAND_UNSUPPORTED = _fDpy.ER_DIAMETER_COMMAND_UNSUPPORTED
ER_DIAMETER_UNABLE_TO_DELIVER = _fDpy.ER_DIAMETER_UNABLE_TO_DELIVER
ER_DIAMETER_REALM_NOT_SERVED = _fDpy.ER_DIAMETER_REALM_NOT_SERVED
ER_DIAMETER_TOO_BUSY = _fDpy.ER_DIAMETER_TOO_BUSY
ER_DIAMETER_LOOP_DETECTED = _fDpy.ER_DIAMETER_LOOP_DETECTED
ER_DIAMETER_REDIRECT_INDICATION = _fDpy.ER_DIAMETER_REDIRECT_INDICATION
ER_DIAMETER_APPLICATION_UNSUPPORTED = _fDpy.ER_DIAMETER_APPLICATION_UNSUPPORTED
ER_DIAMETER_INVALID_HDR_BITS = _fDpy.ER_DIAMETER_INVALID_HDR_BITS
ER_DIAMETER_INVALID_AVP_BITS = _fDpy.ER_DIAMETER_INVALID_AVP_BITS
ER_DIAMETER_UNKNOWN_PEER = _fDpy.ER_DIAMETER_UNKNOWN_PEER
ER_DIAMETER_AUTHENTICATION_REJECTED = _fDpy.ER_DIAMETER_AUTHENTICATION_REJECTED
ER_DIAMETER_OUT_OF_SPACE = _fDpy.ER_DIAMETER_OUT_OF_SPACE
ER_ELECTION_LOST = _fDpy.ER_ELECTION_LOST
ER_DIAMETER_AVP_UNSUPPORTED = _fDpy.ER_DIAMETER_AVP_UNSUPPORTED
ER_DIAMETER_UNKNOWN_SESSION_ID = _fDpy.ER_DIAMETER_UNKNOWN_SESSION_ID
ER_DIAMETER_AUTHORIZATION_REJECTED = _fDpy.ER_DIAMETER_AUTHORIZATION_REJECTED
ER_DIAMETER_INVALID_AVP_VALUE = _fDpy.ER_DIAMETER_INVALID_AVP_VALUE
ER_DIAMETER_MISSING_AVP = _fDpy.ER_DIAMETER_MISSING_AVP
ER_DIAMETER_RESOURCES_EXCEEDED = _fDpy.ER_DIAMETER_RESOURCES_EXCEEDED
ER_DIAMETER_CONTRADICTING_AVPS = _fDpy.ER_DIAMETER_CONTRADICTING_AVPS
ER_DIAMETER_AVP_NOT_ALLOWED = _fDpy.ER_DIAMETER_AVP_NOT_ALLOWED
ER_DIAMETER_AVP_OCCURS_TOO_MANY_TIMES = _fDpy.ER_DIAMETER_AVP_OCCURS_TOO_MANY_TIMES
ER_DIAMETER_NO_COMMON_APPLICATION = _fDpy.ER_DIAMETER_NO_COMMON_APPLICATION
ER_DIAMETER_UNSUPPORTED_VERSION = _fDpy.ER_DIAMETER_UNSUPPORTED_VERSION
ER_DIAMETER_UNABLE_TO_COMPLY = _fDpy.ER_DIAMETER_UNABLE_TO_COMPLY
ER_DIAMETER_INVALID_BIT_IN_HEADER = _fDpy.ER_DIAMETER_INVALID_BIT_IN_HEADER
ER_DIAMETER_INVALID_AVP_LENGTH = _fDpy.ER_DIAMETER_INVALID_AVP_LENGTH
ER_DIAMETER_INVALID_MESSAGE_LENGTH = _fDpy.ER_DIAMETER_INVALID_MESSAGE_LENGTH
ER_DIAMETER_INVALID_AVP_BIT_COMBO = _fDpy.ER_DIAMETER_INVALID_AVP_BIT_COMBO
ER_DIAMETER_NO_COMMON_SECURITY = _fDpy.ER_DIAMETER_NO_COMMON_SECURITY

def fd_sess_start():
    return _fDpy.fd_sess_start()
fd_sess_start = _fDpy.fd_sess_start

def fd_sess_handler_create(handler, cleanup, dumper, opaque):
    return _fDpy.fd_sess_handler_create(handler, cleanup, dumper, opaque)
fd_sess_handler_create = _fDpy.fd_sess_handler_create

def fd_sess_handler_destroy(handler, opaque):
    return _fDpy.fd_sess_handler_destroy(handler, opaque)
fd_sess_handler_destroy = _fDpy.fd_sess_handler_destroy

def fd_sess_new(session, diamid, diamidlen, opt, optlen):
    return _fDpy.fd_sess_new(session, diamid, diamidlen, opt, optlen)
fd_sess_new = _fDpy.fd_sess_new

def fd_sess_fromsid_msg(sid, len, session, isnew):
    return _fDpy.fd_sess_fromsid_msg(sid, len, session, isnew)
fd_sess_fromsid_msg = _fDpy.fd_sess_fromsid_msg

def fd_sess_ref_msg(session):
    return _fDpy.fd_sess_ref_msg(session)
fd_sess_ref_msg = _fDpy.fd_sess_ref_msg

def fd_sess_getsid(session, sid, sidlen):
    return _fDpy.fd_sess_getsid(session, sid, sidlen)
fd_sess_getsid = _fDpy.fd_sess_getsid

def fd_sess_settimeout(session, timeout):
    return _fDpy.fd_sess_settimeout(session, timeout)
fd_sess_settimeout = _fDpy.fd_sess_settimeout

def fd_sess_destroy(session):
    return _fDpy.fd_sess_destroy(session)
fd_sess_destroy = _fDpy.fd_sess_destroy

def fd_sess_reclaim(session):
    return _fDpy.fd_sess_reclaim(session)
fd_sess_reclaim = _fDpy.fd_sess_reclaim

def fd_sess_state_store(handler, session, state):
    return _fDpy.fd_sess_state_store(handler, session, state)
fd_sess_state_store = _fDpy.fd_sess_state_store

def fd_sess_state_retrieve(handler, session, state):
    return _fDpy.fd_sess_state_retrieve(handler, session, state)
fd_sess_state_retrieve = _fDpy.fd_sess_state_retrieve

def fd_sess_dump(session, with_states):
    return _fDpy.fd_sess_dump(session, with_states)
fd_sess_dump = _fDpy.fd_sess_dump

def fd_sess_dump_hdl(handler):
    return _fDpy.fd_sess_dump_hdl(handler)
fd_sess_dump_hdl = _fDpy.fd_sess_dump_hdl

def fd_sess_getcount(cnt):
    return _fDpy.fd_sess_getcount(cnt)
fd_sess_getcount = _fDpy.fd_sess_getcount

def fd_rtd_init(rtd):
    return _fDpy.fd_rtd_init(rtd)
fd_rtd_init = _fDpy.fd_rtd_init

def fd_rtd_free(rtd):
    return _fDpy.fd_rtd_free(rtd)
fd_rtd_free = _fDpy.fd_rtd_free

def fd_rtd_candidate_add(rtd, peerid, peeridlen, realm, realmlen):
    return _fDpy.fd_rtd_candidate_add(rtd, peerid, peeridlen, realm, realmlen)
fd_rtd_candidate_add = _fDpy.fd_rtd_candidate_add

def fd_rtd_candidate_del(rtd, id, idsz):
    return _fDpy.fd_rtd_candidate_del(rtd, id, idsz)
fd_rtd_candidate_del = _fDpy.fd_rtd_candidate_del

def fd_rtd_candidate_extract(rtd, candidates, ini_score):
    return _fDpy.fd_rtd_candidate_extract(rtd, candidates, ini_score)
fd_rtd_candidate_extract = _fDpy.fd_rtd_candidate_extract

def fd_rtd_error_add(rtd, sentto, senttolen, origin, originsz, rcode, candidates, sendingattemtps):
    return _fDpy.fd_rtd_error_add(rtd, sentto, senttolen, origin, originsz, rcode, candidates, sendingattemtps)
fd_rtd_error_add = _fDpy.fd_rtd_error_add

def fd_rtd_get_nb_attempts(rtd, sendingattemtps):
    return _fDpy.fd_rtd_get_nb_attempts(rtd, sendingattemtps)
fd_rtd_get_nb_attempts = _fDpy.fd_rtd_get_nb_attempts
class rtd_candidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rtd_candidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rtd_candidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chain"] = _fDpy.rtd_candidate_chain_set
    __swig_getmethods__["chain"] = _fDpy.rtd_candidate_chain_get
    if _newclass:
        chain = _swig_property(_fDpy.rtd_candidate_chain_get, _fDpy.rtd_candidate_chain_set)
    __swig_setmethods__["diamid"] = _fDpy.rtd_candidate_diamid_set
    __swig_getmethods__["diamid"] = _fDpy.rtd_candidate_diamid_get
    if _newclass:
        diamid = _swig_property(_fDpy.rtd_candidate_diamid_get, _fDpy.rtd_candidate_diamid_set)
    __swig_setmethods__["diamidlen"] = _fDpy.rtd_candidate_diamidlen_set
    __swig_getmethods__["diamidlen"] = _fDpy.rtd_candidate_diamidlen_get
    if _newclass:
        diamidlen = _swig_property(_fDpy.rtd_candidate_diamidlen_get, _fDpy.rtd_candidate_diamidlen_set)
    __swig_setmethods__["realm"] = _fDpy.rtd_candidate_realm_set
    __swig_getmethods__["realm"] = _fDpy.rtd_candidate_realm_get
    if _newclass:
        realm = _swig_property(_fDpy.rtd_candidate_realm_get, _fDpy.rtd_candidate_realm_set)
    __swig_setmethods__["realmlen"] = _fDpy.rtd_candidate_realmlen_set
    __swig_getmethods__["realmlen"] = _fDpy.rtd_candidate_realmlen_get
    if _newclass:
        realmlen = _swig_property(_fDpy.rtd_candidate_realmlen_get, _fDpy.rtd_candidate_realmlen_set)
    __swig_setmethods__["score"] = _fDpy.rtd_candidate_score_set
    __swig_getmethods__["score"] = _fDpy.rtd_candidate_score_get
    if _newclass:
        score = _swig_property(_fDpy.rtd_candidate_score_get, _fDpy.rtd_candidate_score_set)

    def dump(self):
        return _fDpy.rtd_candidate_dump(self)

    def __init__(self):
        this = _fDpy.new_rtd_candidate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_rtd_candidate
    __del__ = lambda self: None
rtd_candidate_swigregister = _fDpy.rtd_candidate_swigregister
rtd_candidate_swigregister(rtd_candidate)


def fd_rtd_candidate_reorder(candidates):
    return _fDpy.fd_rtd_candidate_reorder(candidates)
fd_rtd_candidate_reorder = _fDpy.fd_rtd_candidate_reorder
DIAMETER_VERSION = _fDpy.DIAMETER_VERSION
class msg_hdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msg_hdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msg_hdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_version"] = _fDpy.msg_hdr_msg_version_set
    __swig_getmethods__["msg_version"] = _fDpy.msg_hdr_msg_version_get
    if _newclass:
        msg_version = _swig_property(_fDpy.msg_hdr_msg_version_get, _fDpy.msg_hdr_msg_version_set)
    __swig_setmethods__["msg_length"] = _fDpy.msg_hdr_msg_length_set
    __swig_getmethods__["msg_length"] = _fDpy.msg_hdr_msg_length_get
    if _newclass:
        msg_length = _swig_property(_fDpy.msg_hdr_msg_length_get, _fDpy.msg_hdr_msg_length_set)
    __swig_setmethods__["msg_flags"] = _fDpy.msg_hdr_msg_flags_set
    __swig_getmethods__["msg_flags"] = _fDpy.msg_hdr_msg_flags_get
    if _newclass:
        msg_flags = _swig_property(_fDpy.msg_hdr_msg_flags_get, _fDpy.msg_hdr_msg_flags_set)
    __swig_setmethods__["msg_code"] = _fDpy.msg_hdr_msg_code_set
    __swig_getmethods__["msg_code"] = _fDpy.msg_hdr_msg_code_get
    if _newclass:
        msg_code = _swig_property(_fDpy.msg_hdr_msg_code_get, _fDpy.msg_hdr_msg_code_set)
    __swig_setmethods__["msg_appl"] = _fDpy.msg_hdr_msg_appl_set
    __swig_getmethods__["msg_appl"] = _fDpy.msg_hdr_msg_appl_get
    if _newclass:
        msg_appl = _swig_property(_fDpy.msg_hdr_msg_appl_get, _fDpy.msg_hdr_msg_appl_set)
    __swig_setmethods__["msg_hbhid"] = _fDpy.msg_hdr_msg_hbhid_set
    __swig_getmethods__["msg_hbhid"] = _fDpy.msg_hdr_msg_hbhid_get
    if _newclass:
        msg_hbhid = _swig_property(_fDpy.msg_hdr_msg_hbhid_get, _fDpy.msg_hdr_msg_hbhid_set)
    __swig_setmethods__["msg_eteid"] = _fDpy.msg_hdr_msg_eteid_set
    __swig_getmethods__["msg_eteid"] = _fDpy.msg_hdr_msg_eteid_get
    if _newclass:
        msg_eteid = _swig_property(_fDpy.msg_hdr_msg_eteid_get, _fDpy.msg_hdr_msg_eteid_set)

    def __init__(self):
        this = _fDpy.new_msg_hdr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_msg_hdr
    __del__ = lambda self: None
msg_hdr_swigregister = _fDpy.msg_hdr_swigregister
msg_hdr_swigregister(msg_hdr)

class avp_hdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avp_hdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avp_hdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avp_code"] = _fDpy.avp_hdr_avp_code_set
    __swig_getmethods__["avp_code"] = _fDpy.avp_hdr_avp_code_get
    if _newclass:
        avp_code = _swig_property(_fDpy.avp_hdr_avp_code_get, _fDpy.avp_hdr_avp_code_set)
    __swig_setmethods__["avp_flags"] = _fDpy.avp_hdr_avp_flags_set
    __swig_getmethods__["avp_flags"] = _fDpy.avp_hdr_avp_flags_get
    if _newclass:
        avp_flags = _swig_property(_fDpy.avp_hdr_avp_flags_get, _fDpy.avp_hdr_avp_flags_set)
    __swig_setmethods__["avp_len"] = _fDpy.avp_hdr_avp_len_set
    __swig_getmethods__["avp_len"] = _fDpy.avp_hdr_avp_len_get
    if _newclass:
        avp_len = _swig_property(_fDpy.avp_hdr_avp_len_get, _fDpy.avp_hdr_avp_len_set)
    __swig_setmethods__["avp_vendor"] = _fDpy.avp_hdr_avp_vendor_set
    __swig_getmethods__["avp_vendor"] = _fDpy.avp_hdr_avp_vendor_get
    if _newclass:
        avp_vendor = _swig_property(_fDpy.avp_hdr_avp_vendor_get, _fDpy.avp_hdr_avp_vendor_set)
    __swig_setmethods__["avp_value"] = _fDpy.avp_hdr_avp_value_set
    __swig_getmethods__["avp_value"] = _fDpy.avp_hdr_avp_value_get
    if _newclass:
        avp_value = _swig_property(_fDpy.avp_hdr_avp_value_get, _fDpy.avp_hdr_avp_value_set)

    def __init__(self):
        this = _fDpy.new_avp_hdr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_avp_hdr
    __del__ = lambda self: None
avp_hdr_swigregister = _fDpy.avp_hdr_swigregister
avp_hdr_swigregister(avp_hdr)

MSG_BRW_NEXT = _fDpy.MSG_BRW_NEXT
MSG_BRW_PREV = _fDpy.MSG_BRW_PREV
MSG_BRW_FIRST_CHILD = _fDpy.MSG_BRW_FIRST_CHILD
MSG_BRW_LAST_CHILD = _fDpy.MSG_BRW_LAST_CHILD
MSG_BRW_PARENT = _fDpy.MSG_BRW_PARENT
MSG_BRW_WALK = _fDpy.MSG_BRW_WALK
AVPFL_SET_BLANK_VALUE = _fDpy.AVPFL_SET_BLANK_VALUE
AVPFL_SET_RAWDATA_FROM_AVP = _fDpy.AVPFL_SET_RAWDATA_FROM_AVP
AVPFL_MAX = _fDpy.AVPFL_MAX
MSGFL_ALLOC_ETEID = _fDpy.MSGFL_ALLOC_ETEID
MSGFL_ANSW_ERROR = _fDpy.MSGFL_ANSW_ERROR
MSGFL_ANSW_NOSID = _fDpy.MSGFL_ANSW_NOSID
MSGFL_ANSW_NOPROXYINFO = _fDpy.MSGFL_ANSW_NOPROXYINFO
MSGFL_MAX = _fDpy.MSGFL_MAX

def fd_msg_avp_new(model, flags, avp):
    return _fDpy.fd_msg_avp_new(model, flags, avp)
fd_msg_avp_new = _fDpy.fd_msg_avp_new

def fd_msg_new(model, flags, msg):
    return _fDpy.fd_msg_new(model, flags, msg)
fd_msg_new = _fDpy.fd_msg_new

def fd_msg_new_answer_from_req(dict, msg, flag):
    return _fDpy.fd_msg_new_answer_from_req(dict, msg, flag)
fd_msg_new_answer_from_req = _fDpy.fd_msg_new_answer_from_req

def fd_msg_browse_internal(reference, dir, found, depth):
    return _fDpy.fd_msg_browse_internal(reference, dir, found, depth)
fd_msg_browse_internal = _fDpy.fd_msg_browse_internal

def fd_msg_avp_add(reference, dir, avp):
    return _fDpy.fd_msg_avp_add(reference, dir, avp)
fd_msg_avp_add = _fDpy.fd_msg_avp_add

def fd_msg_search_avp(msg, what, avp):
    return _fDpy.fd_msg_search_avp(msg, what, avp)
fd_msg_search_avp = _fDpy.fd_msg_search_avp

def fd_msg_free(object):
    return _fDpy.fd_msg_free(object)
fd_msg_free = _fDpy.fd_msg_free

def fd_msg_dump_summary(obj, dict, force_parsing, recurse):
    return _fDpy.fd_msg_dump_summary(obj, dict, force_parsing, recurse)
fd_msg_dump_summary = _fDpy.fd_msg_dump_summary

def fd_msg_dump_full(obj, dict, force_parsing, recurse):
    return _fDpy.fd_msg_dump_full(obj, dict, force_parsing, recurse)
fd_msg_dump_full = _fDpy.fd_msg_dump_full

def fd_msg_dump_treeview(obj, dict, force_parsing, recurse):
    return _fDpy.fd_msg_dump_treeview(obj, dict, force_parsing, recurse)
fd_msg_dump_treeview = _fDpy.fd_msg_dump_treeview

def fd_msg_model(reference, model):
    return _fDpy.fd_msg_model(reference, model)
fd_msg_model = _fDpy.fd_msg_model

def fd_msg_hdr(msg, pdata):
    return _fDpy.fd_msg_hdr(msg, pdata)
fd_msg_hdr = _fDpy.fd_msg_hdr

def fd_msg_avp_hdr(avp, pdata):
    return _fDpy.fd_msg_avp_hdr(avp, pdata)
fd_msg_avp_hdr = _fDpy.fd_msg_avp_hdr

def fd_msg_answ_associate(answer, query):
    return _fDpy.fd_msg_answ_associate(answer, query)
fd_msg_answ_associate = _fDpy.fd_msg_answ_associate

def fd_msg_answ_getq(answer, query):
    return _fDpy.fd_msg_answ_getq(answer, query)
fd_msg_answ_getq = _fDpy.fd_msg_answ_getq

def fd_msg_answ_detach(answer):
    return _fDpy.fd_msg_answ_detach(answer)
fd_msg_answ_detach = _fDpy.fd_msg_answ_detach

def fd_msg_anscb_associate(msg, anscb, data, expirecb, timeout):
    return _fDpy.fd_msg_anscb_associate(msg, anscb, data, expirecb, timeout)
fd_msg_anscb_associate = _fDpy.fd_msg_anscb_associate

def fd_msg_anscb_get(msg, anscb, expirecb, data):
    return _fDpy.fd_msg_anscb_get(msg, anscb, expirecb, data)
fd_msg_anscb_get = _fDpy.fd_msg_anscb_get

def fd_msg_anscb_reset(msg, clear_anscb, clear_expirecb):
    return _fDpy.fd_msg_anscb_reset(msg, clear_anscb, clear_expirecb)
fd_msg_anscb_reset = _fDpy.fd_msg_anscb_reset

def fd_msg_anscb_gettimeout(msg):
    return _fDpy.fd_msg_anscb_gettimeout(msg)
fd_msg_anscb_gettimeout = _fDpy.fd_msg_anscb_gettimeout

def fd_msg_rt_associate(msg, rtd):
    return _fDpy.fd_msg_rt_associate(msg, rtd)
fd_msg_rt_associate = _fDpy.fd_msg_rt_associate

def fd_msg_rt_get(msg, rtd):
    return _fDpy.fd_msg_rt_get(msg, rtd)
fd_msg_rt_get = _fDpy.fd_msg_rt_get

def fd_msg_is_routable(msg):
    return _fDpy.fd_msg_is_routable(msg)
fd_msg_is_routable = _fDpy.fd_msg_is_routable

def fd_msg_source_set(msg, diamid, diamidlen):
    return _fDpy.fd_msg_source_set(msg, diamid, diamidlen)
fd_msg_source_set = _fDpy.fd_msg_source_set

def fd_msg_source_setrr(msg, diamid, diamidlen, dict):
    return _fDpy.fd_msg_source_setrr(msg, diamid, diamidlen, dict)
fd_msg_source_setrr = _fDpy.fd_msg_source_setrr

def fd_msg_source_get(msg, diamid, diamidlen):
    return _fDpy.fd_msg_source_get(msg, diamid, diamidlen)
fd_msg_source_get = _fDpy.fd_msg_source_get

def fd_msg_eteid_get():
    return _fDpy.fd_msg_eteid_get()
fd_msg_eteid_get = _fDpy.fd_msg_eteid_get

def fd_msg_sess_get(dict, msg, session, isnew):
    return _fDpy.fd_msg_sess_get(dict, msg, session, isnew)
fd_msg_sess_get = _fDpy.fd_msg_sess_get

def fd_msg_sess_set(msg, session):
    return _fDpy.fd_msg_sess_set(msg, session)
fd_msg_sess_set = _fDpy.fd_msg_sess_set
class fd_msg_pmdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_msg_pmdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_msg_pmdl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sentinel"] = _fDpy.fd_msg_pmdl_sentinel_set
    __swig_getmethods__["sentinel"] = _fDpy.fd_msg_pmdl_sentinel_get
    if _newclass:
        sentinel = _swig_property(_fDpy.fd_msg_pmdl_sentinel_get, _fDpy.fd_msg_pmdl_sentinel_set)
    __swig_setmethods__["lock"] = _fDpy.fd_msg_pmdl_lock_set
    __swig_getmethods__["lock"] = _fDpy.fd_msg_pmdl_lock_get
    if _newclass:
        lock = _swig_property(_fDpy.fd_msg_pmdl_lock_get, _fDpy.fd_msg_pmdl_lock_set)

    def __init__(self):
        this = _fDpy.new_fd_msg_pmdl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_msg_pmdl
    __del__ = lambda self: None
fd_msg_pmdl_swigregister = _fDpy.fd_msg_pmdl_swigregister
fd_msg_pmdl_swigregister(fd_msg_pmdl)


def fd_msg_pmdl_get(msg):
    return _fDpy.fd_msg_pmdl_get(msg)
fd_msg_pmdl_get = _fDpy.fd_msg_pmdl_get

def fd_msg_avp_setvalue(avp, value):
    return _fDpy.fd_msg_avp_setvalue(avp, value)
fd_msg_avp_setvalue = _fDpy.fd_msg_avp_setvalue

def fd_msg_avp_value_encode(data, avp):
    return _fDpy.fd_msg_avp_value_encode(data, avp)
fd_msg_avp_value_encode = _fDpy.fd_msg_avp_value_encode

def fd_msg_avp_value_interpret(avp, data):
    return _fDpy.fd_msg_avp_value_interpret(avp, data)
fd_msg_avp_value_interpret = _fDpy.fd_msg_avp_value_interpret

def fd_msg_bufferize(msg, buffer, len):
    return _fDpy.fd_msg_bufferize(msg, buffer, len)
fd_msg_bufferize = _fDpy.fd_msg_bufferize

def fd_msg_parse_buffer(buffer, buflen, msg):
    return _fDpy.fd_msg_parse_buffer(buffer, buflen, msg)
fd_msg_parse_buffer = _fDpy.fd_msg_parse_buffer
class fd_pei(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_pei, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_pei, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pei_errcode"] = _fDpy.fd_pei_pei_errcode_set
    __swig_getmethods__["pei_errcode"] = _fDpy.fd_pei_pei_errcode_get
    if _newclass:
        pei_errcode = _swig_property(_fDpy.fd_pei_pei_errcode_get, _fDpy.fd_pei_pei_errcode_set)
    __swig_setmethods__["pei_avp"] = _fDpy.fd_pei_pei_avp_set
    __swig_getmethods__["pei_avp"] = _fDpy.fd_pei_pei_avp_get
    if _newclass:
        pei_avp = _swig_property(_fDpy.fd_pei_pei_avp_get, _fDpy.fd_pei_pei_avp_set)
    __swig_setmethods__["pei_avp_free"] = _fDpy.fd_pei_pei_avp_free_set
    __swig_getmethods__["pei_avp_free"] = _fDpy.fd_pei_pei_avp_free_get
    if _newclass:
        pei_avp_free = _swig_property(_fDpy.fd_pei_pei_avp_free_get, _fDpy.fd_pei_pei_avp_free_set)
    __swig_setmethods__["pei_message"] = _fDpy.fd_pei_pei_message_set
    __swig_getmethods__["pei_message"] = _fDpy.fd_pei_pei_message_get
    if _newclass:
        pei_message = _swig_property(_fDpy.fd_pei_pei_message_get, _fDpy.fd_pei_pei_message_set)
    __swig_setmethods__["pei_protoerr"] = _fDpy.fd_pei_pei_protoerr_set
    __swig_getmethods__["pei_protoerr"] = _fDpy.fd_pei_pei_protoerr_get
    if _newclass:
        pei_protoerr = _swig_property(_fDpy.fd_pei_pei_protoerr_get, _fDpy.fd_pei_pei_protoerr_set)

    def __init__(self):
        this = _fDpy.new_fd_pei()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_pei
    __del__ = lambda self: None
fd_pei_swigregister = _fDpy.fd_pei_swigregister
fd_pei_swigregister(fd_pei)


def fd_msg_parse_dict(object, dict, error_info):
    return _fDpy.fd_msg_parse_dict(object, dict, error_info)
fd_msg_parse_dict = _fDpy.fd_msg_parse_dict

def fd_msg_parse_rules(object, dict, error_info):
    return _fDpy.fd_msg_parse_rules(object, dict, error_info)
fd_msg_parse_rules = _fDpy.fd_msg_parse_rules

def fd_msg_update_length(object):
    return _fDpy.fd_msg_update_length(object)
fd_msg_update_length = _fDpy.fd_msg_update_length
DISP_HOW_ANY = _fDpy.DISP_HOW_ANY
DISP_HOW_APPID = _fDpy.DISP_HOW_APPID
DISP_HOW_CC = _fDpy.DISP_HOW_CC
DISP_HOW_AVP = _fDpy.DISP_HOW_AVP
DISP_HOW_AVP_ENUMVAL = _fDpy.DISP_HOW_AVP_ENUMVAL
class disp_when(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disp_when, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disp_when, name)
    __repr__ = _swig_repr
    __swig_setmethods__["app"] = _fDpy.disp_when_app_set
    __swig_getmethods__["app"] = _fDpy.disp_when_app_get
    if _newclass:
        app = _swig_property(_fDpy.disp_when_app_get, _fDpy.disp_when_app_set)
    __swig_setmethods__["command"] = _fDpy.disp_when_command_set
    __swig_getmethods__["command"] = _fDpy.disp_when_command_get
    if _newclass:
        command = _swig_property(_fDpy.disp_when_command_get, _fDpy.disp_when_command_set)
    __swig_setmethods__["avp"] = _fDpy.disp_when_avp_set
    __swig_getmethods__["avp"] = _fDpy.disp_when_avp_get
    if _newclass:
        avp = _swig_property(_fDpy.disp_when_avp_get, _fDpy.disp_when_avp_set)
    __swig_setmethods__["value"] = _fDpy.disp_when_value_set
    __swig_getmethods__["value"] = _fDpy.disp_when_value_get
    if _newclass:
        value = _swig_property(_fDpy.disp_when_value_get, _fDpy.disp_when_value_set)

    def __init__(self, app=None, command=None, avp=None, value=None):
        this = _fDpy.new_disp_when(app, command, avp, value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_disp_when
    __del__ = lambda self: None
disp_when_swigregister = _fDpy.disp_when_swigregister
disp_when_swigregister(disp_when)

DISP_ACT_CONT = _fDpy.DISP_ACT_CONT
DISP_ACT_SEND = _fDpy.DISP_ACT_SEND
DISP_ACT_ERROR = _fDpy.DISP_ACT_ERROR

def fd_disp_register(cb, how, when, opaque, handle):
    return _fDpy.fd_disp_register(cb, how, when, opaque, handle)
fd_disp_register = _fDpy.fd_disp_register

def fd_disp_unregister(handle, opaque):
    return _fDpy.fd_disp_unregister(handle, opaque)
fd_disp_unregister = _fDpy.fd_disp_unregister

def fd_disp_unregister_all():
    return _fDpy.fd_disp_unregister_all()
fd_disp_unregister_all = _fDpy.fd_disp_unregister_all

def fd_msg_dispatch(msg, session, action, error_code, drop_reason, drop_msg):
    return _fDpy.fd_msg_dispatch(msg, session, action, error_code, drop_reason, drop_msg)
fd_msg_dispatch = _fDpy.fd_msg_dispatch

def fd_fifo_new(queue, max):
    return _fDpy.fd_fifo_new(queue, max)
fd_fifo_new = _fDpy.fd_fifo_new

def fd_fifo_del(queue):
    return _fDpy.fd_fifo_del(queue)
fd_fifo_del = _fDpy.fd_fifo_del

def fd_fifo_move(oldq, newq, loc_update):
    return _fDpy.fd_fifo_move(oldq, newq, loc_update)
fd_fifo_move = _fDpy.fd_fifo_move

def fd_fifo_getstats(queue, current_count, limit_count, highest_count, total_count, total, blocking, last):
    return _fDpy.fd_fifo_getstats(queue, current_count, limit_count, highest_count, total_count, total, blocking, last)
fd_fifo_getstats = _fDpy.fd_fifo_getstats

def fd_fifo_length(queue):
    return _fDpy.fd_fifo_length(queue)
fd_fifo_length = _fDpy.fd_fifo_length

def fd_fifo_setthrhd(queue, data, high, h_cb, low, l_cb):
    return _fDpy.fd_fifo_setthrhd(queue, data, high, h_cb, low, l_cb)
fd_fifo_setthrhd = _fDpy.fd_fifo_setthrhd

def fd_fifo_post_int(queue, item):
    return _fDpy.fd_fifo_post_int(queue, item)
fd_fifo_post_int = _fDpy.fd_fifo_post_int

def fd_fifo_post_noblock(queue, item):
    return _fDpy.fd_fifo_post_noblock(queue, item)
fd_fifo_post_noblock = _fDpy.fd_fifo_post_noblock

def fd_fifo_get_int(queue, item):
    return _fDpy.fd_fifo_get_int(queue, item)
fd_fifo_get_int = _fDpy.fd_fifo_get_int

def fd_fifo_tryget_int(queue, item):
    return _fDpy.fd_fifo_tryget_int(queue, item)
fd_fifo_tryget_int = _fDpy.fd_fifo_tryget_int

def fd_fifo_timedget_int(queue, item, abstime):
    return _fDpy.fd_fifo_timedget_int(queue, item, abstime)
fd_fifo_timedget_int = _fDpy.fd_fifo_timedget_int

def fd_fifo_select(queue, abstime):
    return _fDpy.fd_fifo_select(queue, abstime)
fd_fifo_select = _fDpy.fd_fifo_select

def fd_fifo_dump(name, queue, dump_item):
    return _fDpy.fd_fifo_dump(name, queue, dump_item)
fd_fifo_dump = _fDpy.fd_fifo_dump

def fd_core_initialize():
    return _fDpy.fd_core_initialize()
fd_core_initialize = _fDpy.fd_core_initialize

def fd_core_parseconf(conffile):
    return _fDpy.fd_core_parseconf(conffile)
fd_core_parseconf = _fDpy.fd_core_parseconf

def fd_core_start():
    return _fDpy.fd_core_start()
fd_core_start = _fDpy.fd_core_start

def fd_core_waitstartcomplete():
    return _fDpy.fd_core_waitstartcomplete()
fd_core_waitstartcomplete = _fDpy.fd_core_waitstartcomplete

def fd_core_shutdown():
    return _fDpy.fd_core_shutdown()
fd_core_shutdown = _fDpy.fd_core_shutdown

def fd_core_wait_shutdown_complete():
    return _fDpy.fd_core_wait_shutdown_complete()
fd_core_wait_shutdown_complete = _fDpy.fd_core_wait_shutdown_complete
EYEC_CONFIG = _fDpy.EYEC_CONFIG
class fd_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cnf_eyec"] = _fDpy.fd_config_cnf_eyec_set
    __swig_getmethods__["cnf_eyec"] = _fDpy.fd_config_cnf_eyec_get
    if _newclass:
        cnf_eyec = _swig_property(_fDpy.fd_config_cnf_eyec_get, _fDpy.fd_config_cnf_eyec_set)
    __swig_setmethods__["cnf_file"] = _fDpy.fd_config_cnf_file_set
    __swig_getmethods__["cnf_file"] = _fDpy.fd_config_cnf_file_get
    if _newclass:
        cnf_file = _swig_property(_fDpy.fd_config_cnf_file_get, _fDpy.fd_config_cnf_file_set)
    __swig_setmethods__["cnf_diamid"] = _fDpy.fd_config_cnf_diamid_set
    __swig_getmethods__["cnf_diamid"] = _fDpy.fd_config_cnf_diamid_get
    if _newclass:
        cnf_diamid = _swig_property(_fDpy.fd_config_cnf_diamid_get, _fDpy.fd_config_cnf_diamid_set)
    __swig_setmethods__["cnf_diamid_len"] = _fDpy.fd_config_cnf_diamid_len_set
    __swig_getmethods__["cnf_diamid_len"] = _fDpy.fd_config_cnf_diamid_len_get
    if _newclass:
        cnf_diamid_len = _swig_property(_fDpy.fd_config_cnf_diamid_len_get, _fDpy.fd_config_cnf_diamid_len_set)
    __swig_setmethods__["cnf_diamrlm"] = _fDpy.fd_config_cnf_diamrlm_set
    __swig_getmethods__["cnf_diamrlm"] = _fDpy.fd_config_cnf_diamrlm_get
    if _newclass:
        cnf_diamrlm = _swig_property(_fDpy.fd_config_cnf_diamrlm_get, _fDpy.fd_config_cnf_diamrlm_set)
    __swig_setmethods__["cnf_diamrlm_len"] = _fDpy.fd_config_cnf_diamrlm_len_set
    __swig_getmethods__["cnf_diamrlm_len"] = _fDpy.fd_config_cnf_diamrlm_len_get
    if _newclass:
        cnf_diamrlm_len = _swig_property(_fDpy.fd_config_cnf_diamrlm_len_get, _fDpy.fd_config_cnf_diamrlm_len_set)
    __swig_setmethods__["cnf_timer_tc"] = _fDpy.fd_config_cnf_timer_tc_set
    __swig_getmethods__["cnf_timer_tc"] = _fDpy.fd_config_cnf_timer_tc_get
    if _newclass:
        cnf_timer_tc = _swig_property(_fDpy.fd_config_cnf_timer_tc_get, _fDpy.fd_config_cnf_timer_tc_set)
    __swig_setmethods__["cnf_timer_tw"] = _fDpy.fd_config_cnf_timer_tw_set
    __swig_getmethods__["cnf_timer_tw"] = _fDpy.fd_config_cnf_timer_tw_get
    if _newclass:
        cnf_timer_tw = _swig_property(_fDpy.fd_config_cnf_timer_tw_get, _fDpy.fd_config_cnf_timer_tw_set)
    __swig_setmethods__["cnf_port"] = _fDpy.fd_config_cnf_port_set
    __swig_getmethods__["cnf_port"] = _fDpy.fd_config_cnf_port_get
    if _newclass:
        cnf_port = _swig_property(_fDpy.fd_config_cnf_port_get, _fDpy.fd_config_cnf_port_set)
    __swig_setmethods__["cnf_port_tls"] = _fDpy.fd_config_cnf_port_tls_set
    __swig_getmethods__["cnf_port_tls"] = _fDpy.fd_config_cnf_port_tls_get
    if _newclass:
        cnf_port_tls = _swig_property(_fDpy.fd_config_cnf_port_tls_get, _fDpy.fd_config_cnf_port_tls_set)
    __swig_setmethods__["cnf_port_3436"] = _fDpy.fd_config_cnf_port_3436_set
    __swig_getmethods__["cnf_port_3436"] = _fDpy.fd_config_cnf_port_3436_get
    if _newclass:
        cnf_port_3436 = _swig_property(_fDpy.fd_config_cnf_port_3436_get, _fDpy.fd_config_cnf_port_3436_set)
    __swig_setmethods__["cnf_sctp_str"] = _fDpy.fd_config_cnf_sctp_str_set
    __swig_getmethods__["cnf_sctp_str"] = _fDpy.fd_config_cnf_sctp_str_get
    if _newclass:
        cnf_sctp_str = _swig_property(_fDpy.fd_config_cnf_sctp_str_get, _fDpy.fd_config_cnf_sctp_str_set)
    __swig_setmethods__["cnf_endpoints"] = _fDpy.fd_config_cnf_endpoints_set
    __swig_getmethods__["cnf_endpoints"] = _fDpy.fd_config_cnf_endpoints_get
    if _newclass:
        cnf_endpoints = _swig_property(_fDpy.fd_config_cnf_endpoints_get, _fDpy.fd_config_cnf_endpoints_set)
    __swig_setmethods__["cnf_thr_srv"] = _fDpy.fd_config_cnf_thr_srv_set
    __swig_getmethods__["cnf_thr_srv"] = _fDpy.fd_config_cnf_thr_srv_get
    if _newclass:
        cnf_thr_srv = _swig_property(_fDpy.fd_config_cnf_thr_srv_get, _fDpy.fd_config_cnf_thr_srv_set)
    __swig_setmethods__["cnf_apps"] = _fDpy.fd_config_cnf_apps_set
    __swig_getmethods__["cnf_apps"] = _fDpy.fd_config_cnf_apps_get
    if _newclass:
        cnf_apps = _swig_property(_fDpy.fd_config_cnf_apps_get, _fDpy.fd_config_cnf_apps_set)
    __swig_setmethods__["cnf_dispthr"] = _fDpy.fd_config_cnf_dispthr_set
    __swig_getmethods__["cnf_dispthr"] = _fDpy.fd_config_cnf_dispthr_get
    if _newclass:
        cnf_dispthr = _swig_property(_fDpy.fd_config_cnf_dispthr_get, _fDpy.fd_config_cnf_dispthr_set)
    __swig_getmethods__["cnf_flags"] = _fDpy.fd_config_cnf_flags_get
    if _newclass:
        cnf_flags = _swig_property(_fDpy.fd_config_cnf_flags_get)
    __swig_getmethods__["cnf_sec_data"] = _fDpy.fd_config_cnf_sec_data_get
    if _newclass:
        cnf_sec_data = _swig_property(_fDpy.fd_config_cnf_sec_data_get)
    __swig_setmethods__["cnf_orstateid"] = _fDpy.fd_config_cnf_orstateid_set
    __swig_getmethods__["cnf_orstateid"] = _fDpy.fd_config_cnf_orstateid_get
    if _newclass:
        cnf_orstateid = _swig_property(_fDpy.fd_config_cnf_orstateid_get, _fDpy.fd_config_cnf_orstateid_set)
    __swig_setmethods__["cnf_dict"] = _fDpy.fd_config_cnf_dict_set
    __swig_getmethods__["cnf_dict"] = _fDpy.fd_config_cnf_dict_get
    if _newclass:
        cnf_dict = _swig_property(_fDpy.fd_config_cnf_dict_get, _fDpy.fd_config_cnf_dict_set)
    __swig_setmethods__["cnf_main_ev"] = _fDpy.fd_config_cnf_main_ev_set
    __swig_getmethods__["cnf_main_ev"] = _fDpy.fd_config_cnf_main_ev_get
    if _newclass:
        cnf_main_ev = _swig_property(_fDpy.fd_config_cnf_main_ev_get, _fDpy.fd_config_cnf_main_ev_set)

    def __init__(self):
        this = _fDpy.new_fd_config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_config
    __del__ = lambda self: None
fd_config_swigregister = _fDpy.fd_config_swigregister
fd_config_swigregister(fd_config)
fd_core_version = cvar.fd_core_version

class fd_config_cnf_sec_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_config_cnf_sec_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_config_cnf_sec_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tls_disabled"] = _fDpy.fd_config_cnf_sec_data_tls_disabled_set
    __swig_getmethods__["tls_disabled"] = _fDpy.fd_config_cnf_sec_data_tls_disabled_get
    if _newclass:
        tls_disabled = _swig_property(_fDpy.fd_config_cnf_sec_data_tls_disabled_get, _fDpy.fd_config_cnf_sec_data_tls_disabled_set)
    __swig_setmethods__["cert_file"] = _fDpy.fd_config_cnf_sec_data_cert_file_set
    __swig_getmethods__["cert_file"] = _fDpy.fd_config_cnf_sec_data_cert_file_get
    if _newclass:
        cert_file = _swig_property(_fDpy.fd_config_cnf_sec_data_cert_file_get, _fDpy.fd_config_cnf_sec_data_cert_file_set)
    __swig_setmethods__["key_file"] = _fDpy.fd_config_cnf_sec_data_key_file_set
    __swig_getmethods__["key_file"] = _fDpy.fd_config_cnf_sec_data_key_file_get
    if _newclass:
        key_file = _swig_property(_fDpy.fd_config_cnf_sec_data_key_file_get, _fDpy.fd_config_cnf_sec_data_key_file_set)
    __swig_setmethods__["ca_file"] = _fDpy.fd_config_cnf_sec_data_ca_file_set
    __swig_getmethods__["ca_file"] = _fDpy.fd_config_cnf_sec_data_ca_file_get
    if _newclass:
        ca_file = _swig_property(_fDpy.fd_config_cnf_sec_data_ca_file_get, _fDpy.fd_config_cnf_sec_data_ca_file_set)
    __swig_setmethods__["ca_file_nr"] = _fDpy.fd_config_cnf_sec_data_ca_file_nr_set
    __swig_getmethods__["ca_file_nr"] = _fDpy.fd_config_cnf_sec_data_ca_file_nr_get
    if _newclass:
        ca_file_nr = _swig_property(_fDpy.fd_config_cnf_sec_data_ca_file_nr_get, _fDpy.fd_config_cnf_sec_data_ca_file_nr_set)
    __swig_setmethods__["crl_file"] = _fDpy.fd_config_cnf_sec_data_crl_file_set
    __swig_getmethods__["crl_file"] = _fDpy.fd_config_cnf_sec_data_crl_file_get
    if _newclass:
        crl_file = _swig_property(_fDpy.fd_config_cnf_sec_data_crl_file_get, _fDpy.fd_config_cnf_sec_data_crl_file_set)
    __swig_setmethods__["prio_string"] = _fDpy.fd_config_cnf_sec_data_prio_string_set
    __swig_getmethods__["prio_string"] = _fDpy.fd_config_cnf_sec_data_prio_string_get
    if _newclass:
        prio_string = _swig_property(_fDpy.fd_config_cnf_sec_data_prio_string_get, _fDpy.fd_config_cnf_sec_data_prio_string_set)
    __swig_setmethods__["dh_bits"] = _fDpy.fd_config_cnf_sec_data_dh_bits_set
    __swig_getmethods__["dh_bits"] = _fDpy.fd_config_cnf_sec_data_dh_bits_get
    if _newclass:
        dh_bits = _swig_property(_fDpy.fd_config_cnf_sec_data_dh_bits_get, _fDpy.fd_config_cnf_sec_data_dh_bits_set)
    __swig_setmethods__["dh_file"] = _fDpy.fd_config_cnf_sec_data_dh_file_set
    __swig_getmethods__["dh_file"] = _fDpy.fd_config_cnf_sec_data_dh_file_get
    if _newclass:
        dh_file = _swig_property(_fDpy.fd_config_cnf_sec_data_dh_file_get, _fDpy.fd_config_cnf_sec_data_dh_file_set)
    __swig_setmethods__["prio_cache"] = _fDpy.fd_config_cnf_sec_data_prio_cache_set
    __swig_getmethods__["prio_cache"] = _fDpy.fd_config_cnf_sec_data_prio_cache_get
    if _newclass:
        prio_cache = _swig_property(_fDpy.fd_config_cnf_sec_data_prio_cache_get, _fDpy.fd_config_cnf_sec_data_prio_cache_set)
    __swig_setmethods__["dh_cache"] = _fDpy.fd_config_cnf_sec_data_dh_cache_set
    __swig_getmethods__["dh_cache"] = _fDpy.fd_config_cnf_sec_data_dh_cache_get
    if _newclass:
        dh_cache = _swig_property(_fDpy.fd_config_cnf_sec_data_dh_cache_get, _fDpy.fd_config_cnf_sec_data_dh_cache_set)
    __swig_setmethods__["credentials"] = _fDpy.fd_config_cnf_sec_data_credentials_set
    __swig_getmethods__["credentials"] = _fDpy.fd_config_cnf_sec_data_credentials_get
    if _newclass:
        credentials = _swig_property(_fDpy.fd_config_cnf_sec_data_credentials_get, _fDpy.fd_config_cnf_sec_data_credentials_set)
    __swig_setmethods__["trustlist"] = _fDpy.fd_config_cnf_sec_data_trustlist_set
    __swig_getmethods__["trustlist"] = _fDpy.fd_config_cnf_sec_data_trustlist_get
    if _newclass:
        trustlist = _swig_property(_fDpy.fd_config_cnf_sec_data_trustlist_get, _fDpy.fd_config_cnf_sec_data_trustlist_set)

    def __init__(self):
        this = _fDpy.new_fd_config_cnf_sec_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_config_cnf_sec_data
    __del__ = lambda self: None
fd_config_cnf_sec_data_swigregister = _fDpy.fd_config_cnf_sec_data_swigregister
fd_config_cnf_sec_data_swigregister(fd_config_cnf_sec_data)

class fd_config_cnf_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_config_cnf_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_config_cnf_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["no_fwd"] = _fDpy.fd_config_cnf_flags_no_fwd_set
    __swig_getmethods__["no_fwd"] = _fDpy.fd_config_cnf_flags_no_fwd_get
    if _newclass:
        no_fwd = _swig_property(_fDpy.fd_config_cnf_flags_no_fwd_get, _fDpy.fd_config_cnf_flags_no_fwd_set)
    __swig_setmethods__["no_ip4"] = _fDpy.fd_config_cnf_flags_no_ip4_set
    __swig_getmethods__["no_ip4"] = _fDpy.fd_config_cnf_flags_no_ip4_get
    if _newclass:
        no_ip4 = _swig_property(_fDpy.fd_config_cnf_flags_no_ip4_get, _fDpy.fd_config_cnf_flags_no_ip4_set)
    __swig_setmethods__["no_ip6"] = _fDpy.fd_config_cnf_flags_no_ip6_set
    __swig_getmethods__["no_ip6"] = _fDpy.fd_config_cnf_flags_no_ip6_get
    if _newclass:
        no_ip6 = _swig_property(_fDpy.fd_config_cnf_flags_no_ip6_get, _fDpy.fd_config_cnf_flags_no_ip6_set)
    __swig_setmethods__["no_tcp"] = _fDpy.fd_config_cnf_flags_no_tcp_set
    __swig_getmethods__["no_tcp"] = _fDpy.fd_config_cnf_flags_no_tcp_get
    if _newclass:
        no_tcp = _swig_property(_fDpy.fd_config_cnf_flags_no_tcp_get, _fDpy.fd_config_cnf_flags_no_tcp_set)
    __swig_setmethods__["no_sctp"] = _fDpy.fd_config_cnf_flags_no_sctp_set
    __swig_getmethods__["no_sctp"] = _fDpy.fd_config_cnf_flags_no_sctp_get
    if _newclass:
        no_sctp = _swig_property(_fDpy.fd_config_cnf_flags_no_sctp_get, _fDpy.fd_config_cnf_flags_no_sctp_set)
    __swig_setmethods__["pr_tcp"] = _fDpy.fd_config_cnf_flags_pr_tcp_set
    __swig_getmethods__["pr_tcp"] = _fDpy.fd_config_cnf_flags_pr_tcp_get
    if _newclass:
        pr_tcp = _swig_property(_fDpy.fd_config_cnf_flags_pr_tcp_get, _fDpy.fd_config_cnf_flags_pr_tcp_set)
    __swig_setmethods__["tls_alg"] = _fDpy.fd_config_cnf_flags_tls_alg_set
    __swig_getmethods__["tls_alg"] = _fDpy.fd_config_cnf_flags_tls_alg_get
    if _newclass:
        tls_alg = _swig_property(_fDpy.fd_config_cnf_flags_tls_alg_get, _fDpy.fd_config_cnf_flags_tls_alg_set)

    def __init__(self):
        this = _fDpy.new_fd_config_cnf_flags()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_config_cnf_flags
    __del__ = lambda self: None
fd_config_cnf_flags_swigregister = _fDpy.fd_config_cnf_flags_swigregister
fd_config_cnf_flags_swigregister(fd_config_cnf_flags)

STATE_NEW = _fDpy.STATE_NEW
STATE_OPEN = _fDpy.STATE_OPEN
STATE_CLOSED = _fDpy.STATE_CLOSED
STATE_CLOSING = _fDpy.STATE_CLOSING
STATE_WAITCNXACK = _fDpy.STATE_WAITCNXACK
STATE_WAITCNXACK_ELEC = _fDpy.STATE_WAITCNXACK_ELEC
STATE_WAITCEA = _fDpy.STATE_WAITCEA
STATE_OPEN_HANDSHAKE = _fDpy.STATE_OPEN_HANDSHAKE
STATE_SUSPECT = _fDpy.STATE_SUSPECT
STATE_REOPEN = _fDpy.STATE_REOPEN
STATE_OPEN_NEW = _fDpy.STATE_OPEN_NEW
STATE_CLOSING_GRACE = _fDpy.STATE_CLOSING_GRACE
STATE_ZOMBIE = _fDpy.STATE_ZOMBIE
PI_P3_DEFAULT = _fDpy.PI_P3_DEFAULT
PI_P3_IP = _fDpy.PI_P3_IP
PI_P3_IPv6 = _fDpy.PI_P3_IPv6
PI_P4_DEFAULT = _fDpy.PI_P4_DEFAULT
PI_P4_TCP = _fDpy.PI_P4_TCP
PI_P4_SCTP = _fDpy.PI_P4_SCTP
PI_ALGPREF_SCTP = _fDpy.PI_ALGPREF_SCTP
PI_ALGPREF_TCP = _fDpy.PI_ALGPREF_TCP
PI_SEC_DEFAULT = _fDpy.PI_SEC_DEFAULT
PI_SEC_NONE = _fDpy.PI_SEC_NONE
PI_SEC_TLS_OLD = _fDpy.PI_SEC_TLS_OLD
PI_SCTPSEC_DEF = _fDpy.PI_SCTPSEC_DEF
PI_SCTPSEC_3436 = _fDpy.PI_SCTPSEC_3436
PI_EXP_NONE = _fDpy.PI_EXP_NONE
PI_EXP_INACTIVE = _fDpy.PI_EXP_INACTIVE
PI_PRST_NONE = _fDpy.PI_PRST_NONE
PI_PRST_ALWAYS = _fDpy.PI_PRST_ALWAYS
class peer_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peer_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peer_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pi_diamid"] = _fDpy.peer_info_pi_diamid_set
    __swig_getmethods__["pi_diamid"] = _fDpy.peer_info_pi_diamid_get
    if _newclass:
        pi_diamid = _swig_property(_fDpy.peer_info_pi_diamid_get, _fDpy.peer_info_pi_diamid_set)
    __swig_setmethods__["pi_diamidlen"] = _fDpy.peer_info_pi_diamidlen_set
    __swig_getmethods__["pi_diamidlen"] = _fDpy.peer_info_pi_diamidlen_get
    if _newclass:
        pi_diamidlen = _swig_property(_fDpy.peer_info_pi_diamidlen_get, _fDpy.peer_info_pi_diamidlen_set)
    __swig_getmethods__["config"] = _fDpy.peer_info_config_get
    if _newclass:
        config = _swig_property(_fDpy.peer_info_config_get)
    __swig_getmethods__["runtime"] = _fDpy.peer_info_runtime_get
    if _newclass:
        runtime = _swig_property(_fDpy.peer_info_runtime_get)
    __swig_setmethods__["pi_endpoints"] = _fDpy.peer_info_pi_endpoints_set
    __swig_getmethods__["pi_endpoints"] = _fDpy.peer_info_pi_endpoints_get
    if _newclass:
        pi_endpoints = _swig_property(_fDpy.peer_info_pi_endpoints_get, _fDpy.peer_info_pi_endpoints_set)

    def __init__(self):
        this = _fDpy.new_peer_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, PyCb=None):
        return _fDpy.peer_info_add(self, PyCb)
    __swig_destroy__ = _fDpy.delete_peer_info
    __del__ = lambda self: None
peer_info_swigregister = _fDpy.peer_info_swigregister
peer_info_swigregister(peer_info)
fd_g_config = cvar.fd_g_config
peer_state_str = cvar.peer_state_str

class peer_info_runtime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peer_info_runtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peer_info_runtime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pir_realm"] = _fDpy.peer_info_runtime_pir_realm_set
    __swig_getmethods__["pir_realm"] = _fDpy.peer_info_runtime_pir_realm_get
    if _newclass:
        pir_realm = _swig_property(_fDpy.peer_info_runtime_pir_realm_get, _fDpy.peer_info_runtime_pir_realm_set)
    __swig_setmethods__["pir_realmlen"] = _fDpy.peer_info_runtime_pir_realmlen_set
    __swig_getmethods__["pir_realmlen"] = _fDpy.peer_info_runtime_pir_realmlen_get
    if _newclass:
        pir_realmlen = _swig_property(_fDpy.peer_info_runtime_pir_realmlen_get, _fDpy.peer_info_runtime_pir_realmlen_set)
    __swig_setmethods__["pir_vendorid"] = _fDpy.peer_info_runtime_pir_vendorid_set
    __swig_getmethods__["pir_vendorid"] = _fDpy.peer_info_runtime_pir_vendorid_get
    if _newclass:
        pir_vendorid = _swig_property(_fDpy.peer_info_runtime_pir_vendorid_get, _fDpy.peer_info_runtime_pir_vendorid_set)
    __swig_setmethods__["pir_orstate"] = _fDpy.peer_info_runtime_pir_orstate_set
    __swig_getmethods__["pir_orstate"] = _fDpy.peer_info_runtime_pir_orstate_get
    if _newclass:
        pir_orstate = _swig_property(_fDpy.peer_info_runtime_pir_orstate_get, _fDpy.peer_info_runtime_pir_orstate_set)
    __swig_setmethods__["pir_prodname"] = _fDpy.peer_info_runtime_pir_prodname_set
    __swig_getmethods__["pir_prodname"] = _fDpy.peer_info_runtime_pir_prodname_get
    if _newclass:
        pir_prodname = _swig_property(_fDpy.peer_info_runtime_pir_prodname_get, _fDpy.peer_info_runtime_pir_prodname_set)
    __swig_setmethods__["pir_firmrev"] = _fDpy.peer_info_runtime_pir_firmrev_set
    __swig_getmethods__["pir_firmrev"] = _fDpy.peer_info_runtime_pir_firmrev_get
    if _newclass:
        pir_firmrev = _swig_property(_fDpy.peer_info_runtime_pir_firmrev_get, _fDpy.peer_info_runtime_pir_firmrev_set)
    __swig_setmethods__["pir_relay"] = _fDpy.peer_info_runtime_pir_relay_set
    __swig_getmethods__["pir_relay"] = _fDpy.peer_info_runtime_pir_relay_get
    if _newclass:
        pir_relay = _swig_property(_fDpy.peer_info_runtime_pir_relay_get, _fDpy.peer_info_runtime_pir_relay_set)
    __swig_setmethods__["pir_apps"] = _fDpy.peer_info_runtime_pir_apps_set
    __swig_getmethods__["pir_apps"] = _fDpy.peer_info_runtime_pir_apps_get
    if _newclass:
        pir_apps = _swig_property(_fDpy.peer_info_runtime_pir_apps_get, _fDpy.peer_info_runtime_pir_apps_set)
    __swig_setmethods__["pir_isi"] = _fDpy.peer_info_runtime_pir_isi_set
    __swig_getmethods__["pir_isi"] = _fDpy.peer_info_runtime_pir_isi_get
    if _newclass:
        pir_isi = _swig_property(_fDpy.peer_info_runtime_pir_isi_get, _fDpy.peer_info_runtime_pir_isi_set)
    __swig_setmethods__["pir_lastDC"] = _fDpy.peer_info_runtime_pir_lastDC_set
    __swig_getmethods__["pir_lastDC"] = _fDpy.peer_info_runtime_pir_lastDC_get
    if _newclass:
        pir_lastDC = _swig_property(_fDpy.peer_info_runtime_pir_lastDC_get, _fDpy.peer_info_runtime_pir_lastDC_set)
    __swig_setmethods__["pir_proto"] = _fDpy.peer_info_runtime_pir_proto_set
    __swig_getmethods__["pir_proto"] = _fDpy.peer_info_runtime_pir_proto_get
    if _newclass:
        pir_proto = _swig_property(_fDpy.peer_info_runtime_pir_proto_get, _fDpy.peer_info_runtime_pir_proto_set)
    __swig_setmethods__["pir_cert_list"] = _fDpy.peer_info_runtime_pir_cert_list_set
    __swig_getmethods__["pir_cert_list"] = _fDpy.peer_info_runtime_pir_cert_list_get
    if _newclass:
        pir_cert_list = _swig_property(_fDpy.peer_info_runtime_pir_cert_list_get, _fDpy.peer_info_runtime_pir_cert_list_set)
    __swig_setmethods__["pir_cert_list_size"] = _fDpy.peer_info_runtime_pir_cert_list_size_set
    __swig_getmethods__["pir_cert_list_size"] = _fDpy.peer_info_runtime_pir_cert_list_size_get
    if _newclass:
        pir_cert_list_size = _swig_property(_fDpy.peer_info_runtime_pir_cert_list_size_get, _fDpy.peer_info_runtime_pir_cert_list_size_set)

    def __init__(self):
        this = _fDpy.new_peer_info_runtime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_peer_info_runtime
    __del__ = lambda self: None
peer_info_runtime_swigregister = _fDpy.peer_info_runtime_swigregister
peer_info_runtime_swigregister(peer_info_runtime)

class peer_info_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peer_info_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peer_info_config, name)
    __repr__ = _swig_repr
    __swig_getmethods__["pic_flags"] = _fDpy.peer_info_config_pic_flags_get
    if _newclass:
        pic_flags = _swig_property(_fDpy.peer_info_config_pic_flags_get)
    __swig_setmethods__["pic_realm"] = _fDpy.peer_info_config_pic_realm_set
    __swig_getmethods__["pic_realm"] = _fDpy.peer_info_config_pic_realm_get
    if _newclass:
        pic_realm = _swig_property(_fDpy.peer_info_config_pic_realm_get, _fDpy.peer_info_config_pic_realm_set)
    __swig_setmethods__["pic_port"] = _fDpy.peer_info_config_pic_port_set
    __swig_getmethods__["pic_port"] = _fDpy.peer_info_config_pic_port_get
    if _newclass:
        pic_port = _swig_property(_fDpy.peer_info_config_pic_port_get, _fDpy.peer_info_config_pic_port_set)
    __swig_setmethods__["pic_lft"] = _fDpy.peer_info_config_pic_lft_set
    __swig_getmethods__["pic_lft"] = _fDpy.peer_info_config_pic_lft_get
    if _newclass:
        pic_lft = _swig_property(_fDpy.peer_info_config_pic_lft_get, _fDpy.peer_info_config_pic_lft_set)
    __swig_setmethods__["pic_tctimer"] = _fDpy.peer_info_config_pic_tctimer_set
    __swig_getmethods__["pic_tctimer"] = _fDpy.peer_info_config_pic_tctimer_get
    if _newclass:
        pic_tctimer = _swig_property(_fDpy.peer_info_config_pic_tctimer_get, _fDpy.peer_info_config_pic_tctimer_set)
    __swig_setmethods__["pic_twtimer"] = _fDpy.peer_info_config_pic_twtimer_set
    __swig_getmethods__["pic_twtimer"] = _fDpy.peer_info_config_pic_twtimer_get
    if _newclass:
        pic_twtimer = _swig_property(_fDpy.peer_info_config_pic_twtimer_get, _fDpy.peer_info_config_pic_twtimer_set)
    __swig_setmethods__["pic_priority"] = _fDpy.peer_info_config_pic_priority_set
    __swig_getmethods__["pic_priority"] = _fDpy.peer_info_config_pic_priority_get
    if _newclass:
        pic_priority = _swig_property(_fDpy.peer_info_config_pic_priority_get, _fDpy.peer_info_config_pic_priority_set)

    def __init__(self):
        this = _fDpy.new_peer_info_config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_peer_info_config
    __del__ = lambda self: None
peer_info_config_swigregister = _fDpy.peer_info_config_swigregister
peer_info_config_swigregister(peer_info_config)

class peer_info_config_pic_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peer_info_config_pic_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peer_info_config_pic_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pro3"] = _fDpy.peer_info_config_pic_flags_pro3_set
    __swig_getmethods__["pro3"] = _fDpy.peer_info_config_pic_flags_pro3_get
    if _newclass:
        pro3 = _swig_property(_fDpy.peer_info_config_pic_flags_pro3_get, _fDpy.peer_info_config_pic_flags_pro3_set)
    __swig_setmethods__["pro4"] = _fDpy.peer_info_config_pic_flags_pro4_set
    __swig_getmethods__["pro4"] = _fDpy.peer_info_config_pic_flags_pro4_get
    if _newclass:
        pro4 = _swig_property(_fDpy.peer_info_config_pic_flags_pro4_get, _fDpy.peer_info_config_pic_flags_pro4_set)
    __swig_setmethods__["alg"] = _fDpy.peer_info_config_pic_flags_alg_set
    __swig_getmethods__["alg"] = _fDpy.peer_info_config_pic_flags_alg_get
    if _newclass:
        alg = _swig_property(_fDpy.peer_info_config_pic_flags_alg_get, _fDpy.peer_info_config_pic_flags_alg_set)
    __swig_setmethods__["sec"] = _fDpy.peer_info_config_pic_flags_sec_set
    __swig_getmethods__["sec"] = _fDpy.peer_info_config_pic_flags_sec_get
    if _newclass:
        sec = _swig_property(_fDpy.peer_info_config_pic_flags_sec_get, _fDpy.peer_info_config_pic_flags_sec_set)
    __swig_setmethods__["sctpsec"] = _fDpy.peer_info_config_pic_flags_sctpsec_set
    __swig_getmethods__["sctpsec"] = _fDpy.peer_info_config_pic_flags_sctpsec_get
    if _newclass:
        sctpsec = _swig_property(_fDpy.peer_info_config_pic_flags_sctpsec_get, _fDpy.peer_info_config_pic_flags_sctpsec_set)
    __swig_setmethods__["exp"] = _fDpy.peer_info_config_pic_flags_exp_set
    __swig_getmethods__["exp"] = _fDpy.peer_info_config_pic_flags_exp_get
    if _newclass:
        exp = _swig_property(_fDpy.peer_info_config_pic_flags_exp_get, _fDpy.peer_info_config_pic_flags_exp_set)
    __swig_setmethods__["persist"] = _fDpy.peer_info_config_pic_flags_persist_set
    __swig_getmethods__["persist"] = _fDpy.peer_info_config_pic_flags_persist_get
    if _newclass:
        persist = _swig_property(_fDpy.peer_info_config_pic_flags_persist_get, _fDpy.peer_info_config_pic_flags_persist_set)

    def __init__(self):
        this = _fDpy.new_peer_info_config_pic_flags()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_peer_info_config_pic_flags
    __del__ = lambda self: None
peer_info_config_pic_flags_swigregister = _fDpy.peer_info_config_pic_flags_swigregister
peer_info_config_pic_flags_swigregister(peer_info_config_pic_flags)

class peer_hdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peer_hdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peer_hdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chain"] = _fDpy.peer_hdr_chain_set
    __swig_getmethods__["chain"] = _fDpy.peer_hdr_chain_get
    if _newclass:
        chain = _swig_property(_fDpy.peer_hdr_chain_get, _fDpy.peer_hdr_chain_set)
    __swig_setmethods__["info"] = _fDpy.peer_hdr_info_set
    __swig_getmethods__["info"] = _fDpy.peer_hdr_info_get
    if _newclass:
        info = _swig_property(_fDpy.peer_hdr_info_get, _fDpy.peer_hdr_info_set)

    def __init__(self):
        this = _fDpy.new_peer_hdr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_peer_hdr
    __del__ = lambda self: None
peer_hdr_swigregister = _fDpy.peer_hdr_swigregister
peer_hdr_swigregister(peer_hdr)


def fd_peer_add(info, orig_dbg, cb, cb_data):
    return _fDpy.fd_peer_add(info, orig_dbg, cb, cb_data)
fd_peer_add = _fDpy.fd_peer_add

def fd_peer_getbyid(diamid, diamidlen, igncase, peer):
    return _fDpy.fd_peer_getbyid(diamid, diamidlen, igncase, peer)
fd_peer_getbyid = _fDpy.fd_peer_getbyid

def fd_peer_get_state(peer):
    return _fDpy.fd_peer_get_state(peer)
fd_peer_get_state = _fDpy.fd_peer_get_state

def fd_peer_cnx_proto_info(peer, buf, len):
    return _fDpy.fd_peer_cnx_proto_info(peer, buf, len)
fd_peer_cnx_proto_info = _fDpy.fd_peer_cnx_proto_info

def fd_peer_get_load_pending(peer, to_receive, to_send):
    return _fDpy.fd_peer_get_load_pending(peer, to_receive, to_send)
fd_peer_get_load_pending = _fDpy.fd_peer_get_load_pending

def fd_peer_validate_register(peer_validate):
    return _fDpy.fd_peer_validate_register(peer_validate)
fd_peer_validate_register = _fDpy.fd_peer_validate_register

def fd_msg_send(pmsg, anscb, data):
    return _fDpy.fd_msg_send(pmsg, anscb, data)
fd_msg_send = _fDpy.fd_msg_send

def fd_msg_send_timeout(pmsg, anscb, data, expirecb, timeout):
    return _fDpy.fd_msg_send_timeout(pmsg, anscb, data, expirecb, timeout)
fd_msg_send_timeout = _fDpy.fd_msg_send_timeout

def fd_msg_rescode_set(msg, rescode, errormsg, optavp, type_id):
    return _fDpy.fd_msg_rescode_set(msg, rescode, errormsg, optavp, type_id)
fd_msg_rescode_set = _fDpy.fd_msg_rescode_set

def fd_msg_add_origin(msg, osi):
    return _fDpy.fd_msg_add_origin(msg, osi)
fd_msg_add_origin = _fDpy.fd_msg_add_origin

def fd_msg_new_session(msg, opt, optlen):
    return _fDpy.fd_msg_new_session(msg, opt, optlen)
fd_msg_new_session = _fDpy.fd_msg_new_session

def fd_msg_parse_or_error(msg, error):
    return _fDpy.fd_msg_parse_or_error(msg, error)
fd_msg_parse_or_error = _fDpy.fd_msg_parse_or_error

def fd_disp_app_support(app, vendor, auth, acct):
    return _fDpy.fd_disp_app_support(app, vendor, auth, acct)
fd_disp_app_support = _fDpy.fd_disp_app_support
RT_FWD_REQ = _fDpy.RT_FWD_REQ
RT_FWD_ALL = _fDpy.RT_FWD_ALL
RT_FWD_ANS = _fDpy.RT_FWD_ANS

def fd_rt_fwd_register(rt_fwd_cb, cbdata, dir, handler):
    return _fDpy.fd_rt_fwd_register(rt_fwd_cb, cbdata, dir, handler)
fd_rt_fwd_register = _fDpy.fd_rt_fwd_register

def fd_rt_fwd_unregister(handler, cbdata):
    return _fDpy.fd_rt_fwd_unregister(handler, cbdata)
fd_rt_fwd_unregister = _fDpy.fd_rt_fwd_unregister
FD_SCORE_NO_DELIVERY = _fDpy.FD_SCORE_NO_DELIVERY
FD_SCORE_SENT_REDIRECT = _fDpy.FD_SCORE_SENT_REDIRECT
FD_SCORE_INI = _fDpy.FD_SCORE_INI
FD_SCORE_LOAD_BALANCE = _fDpy.FD_SCORE_LOAD_BALANCE
FD_SCORE_DEFAULT = _fDpy.FD_SCORE_DEFAULT
FD_SCORE_DEFAULT_REALM = _fDpy.FD_SCORE_DEFAULT_REALM
FD_SCORE_REALM = _fDpy.FD_SCORE_REALM
FD_SCORE_REDIR_HOST = _fDpy.FD_SCORE_REDIR_HOST
FD_SCORE_REDIR_APP = _fDpy.FD_SCORE_REDIR_APP
FD_SCORE_REDIR_REALM = _fDpy.FD_SCORE_REDIR_REALM
FD_SCORE_REDIR_REALM_APP = _fDpy.FD_SCORE_REDIR_REALM_APP
FD_SCORE_REDIR_USER = _fDpy.FD_SCORE_REDIR_USER
FD_SCORE_REDIR_SESSION = _fDpy.FD_SCORE_REDIR_SESSION
FD_SCORE_REDIR_ONCE = _fDpy.FD_SCORE_REDIR_ONCE
FD_SCORE_FINALDEST = _fDpy.FD_SCORE_FINALDEST

def fd_rt_out_register(rt_out_cb, cbdata, priority, handler):
    return _fDpy.fd_rt_out_register(rt_out_cb, cbdata, priority, handler)
fd_rt_out_register = _fDpy.fd_rt_out_register

def fd_rt_out_unregister(handler, cbdata):
    return _fDpy.fd_rt_out_unregister(handler, cbdata)
fd_rt_out_unregister = _fDpy.fd_rt_out_unregister
class fd_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _fDpy.fd_event_code_set
    __swig_getmethods__["code"] = _fDpy.fd_event_code_get
    if _newclass:
        code = _swig_property(_fDpy.fd_event_code_get, _fDpy.fd_event_code_set)
    __swig_setmethods__["size"] = _fDpy.fd_event_size_set
    __swig_getmethods__["size"] = _fDpy.fd_event_size_get
    if _newclass:
        size = _swig_property(_fDpy.fd_event_size_get, _fDpy.fd_event_size_set)
    __swig_setmethods__["data"] = _fDpy.fd_event_data_set
    __swig_getmethods__["data"] = _fDpy.fd_event_data_get
    if _newclass:
        data = _swig_property(_fDpy.fd_event_data_get, _fDpy.fd_event_data_set)

    def __init__(self, *args):
        this = _fDpy.new_fd_event(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_event
    __del__ = lambda self: None
fd_event_swigregister = _fDpy.fd_event_swigregister
fd_event_swigregister(fd_event)

FDEV_TERMINATE_INT = _fDpy.FDEV_TERMINATE_INT
FDEV_TRIGGER = _fDpy.FDEV_TRIGGER

def fd_event_send(queue, code, datasz, data):
    return _fDpy.fd_event_send(queue, code, datasz, data)
fd_event_send = _fDpy.fd_event_send

def fd_event_get(queue, code, datasz, data):
    return _fDpy.fd_event_get(queue, code, datasz, data)
fd_event_get = _fDpy.fd_event_get

def fd_event_timedget(queue, timeout, timeoutcode, code, datasz, data):
    return _fDpy.fd_event_timedget(queue, timeout, timeoutcode, code, datasz, data)
fd_event_timedget = _fDpy.fd_event_timedget

def fd_event_destroy(queue, free_cb):
    return _fDpy.fd_event_destroy(queue, free_cb)
fd_event_destroy = _fDpy.fd_event_destroy

def fd_ev_str(event):
    return _fDpy.fd_ev_str(event)
fd_ev_str = _fDpy.fd_ev_str

def fd_event_trig_regcb(trigger_val, module, cb):
    return _fDpy.fd_event_trig_regcb(trigger_val, module, cb)
fd_event_trig_regcb = _fDpy.fd_event_trig_regcb

def fd_event_trig_dump():
    return _fDpy.fd_event_trig_dump()
fd_event_trig_dump = _fDpy.fd_event_trig_dump

def fd_conf_dump():
    return _fDpy.fd_conf_dump()
fd_conf_dump = _fDpy.fd_conf_dump

def fd_ext_dump():
    return _fDpy.fd_ext_dump()
fd_ext_dump = _fDpy.fd_ext_dump

def fd_servers_dump(details):
    return _fDpy.fd_servers_dump(details)
fd_servers_dump = _fDpy.fd_servers_dump

def fd_peer_dump_list(details):
    return _fDpy.fd_peer_dump_list(details)
fd_peer_dump_list = _fDpy.fd_peer_dump_list

def fd_peer_dump(p, details):
    return _fDpy.fd_peer_dump(p, details)
fd_peer_dump = _fDpy.fd_peer_dump
class fd_endpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_endpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_endpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chain"] = _fDpy.fd_endpoint_chain_set
    __swig_getmethods__["chain"] = _fDpy.fd_endpoint_chain_get
    if _newclass:
        chain = _swig_property(_fDpy.fd_endpoint_chain_get, _fDpy.fd_endpoint_chain_set)
    __swig_getmethods__["s"] = _fDpy.fd_endpoint_s_get
    if _newclass:
        s = _swig_property(_fDpy.fd_endpoint_s_get)
    __swig_setmethods__["flags"] = _fDpy.fd_endpoint_flags_set
    __swig_getmethods__["flags"] = _fDpy.fd_endpoint_flags_get
    if _newclass:
        flags = _swig_property(_fDpy.fd_endpoint_flags_get, _fDpy.fd_endpoint_flags_set)

    def __init__(self, *args):
        this = _fDpy.new_fd_endpoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_endpoint
    __del__ = lambda self: None

    def add_merge(self, eplist):
        return _fDpy.fd_endpoint_add_merge(self, eplist)

    def dump(self):
        return _fDpy.fd_endpoint_dump(self)
fd_endpoint_swigregister = _fDpy.fd_endpoint_swigregister
fd_endpoint_swigregister(fd_endpoint)
EP_FL_CONF = _fDpy.EP_FL_CONF
EP_FL_DISC = _fDpy.EP_FL_DISC
EP_FL_ADV = _fDpy.EP_FL_ADV
EP_FL_LL = _fDpy.EP_FL_LL
EP_FL_PRIMARY = _fDpy.EP_FL_PRIMARY
EP_ACCEPTALL = _fDpy.EP_ACCEPTALL

class fd_endpoint_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_endpoint_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_endpoint_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ss"] = _fDpy.fd_endpoint_s_ss_set
    __swig_getmethods__["ss"] = _fDpy.fd_endpoint_s_ss_get
    if _newclass:
        ss = _swig_property(_fDpy.fd_endpoint_s_ss_get, _fDpy.fd_endpoint_s_ss_set)
    __swig_setmethods__["sin"] = _fDpy.fd_endpoint_s_sin_set
    __swig_getmethods__["sin"] = _fDpy.fd_endpoint_s_sin_get
    if _newclass:
        sin = _swig_property(_fDpy.fd_endpoint_s_sin_get, _fDpy.fd_endpoint_s_sin_set)
    __swig_setmethods__["sin6"] = _fDpy.fd_endpoint_s_sin6_set
    __swig_getmethods__["sin6"] = _fDpy.fd_endpoint_s_sin6_get
    if _newclass:
        sin6 = _swig_property(_fDpy.fd_endpoint_s_sin6_get, _fDpy.fd_endpoint_s_sin6_set)
    __swig_setmethods__["sa"] = _fDpy.fd_endpoint_s_sa_set
    __swig_getmethods__["sa"] = _fDpy.fd_endpoint_s_sa_get
    if _newclass:
        sa = _swig_property(_fDpy.fd_endpoint_s_sa_get, _fDpy.fd_endpoint_s_sa_set)

    def __init__(self):
        this = _fDpy.new_fd_endpoint_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_endpoint_s
    __del__ = lambda self: None
fd_endpoint_s_swigregister = _fDpy.fd_endpoint_s_swigregister
fd_endpoint_s_swigregister(fd_endpoint_s)


def fd_ep_add_merge(list, sa, sl, flags):
    return _fDpy.fd_ep_add_merge(list, sa, sl, flags)
fd_ep_add_merge = _fDpy.fd_ep_add_merge

def fd_ep_filter(list, flags):
    return _fDpy.fd_ep_filter(list, flags)
fd_ep_filter = _fDpy.fd_ep_filter

def fd_ep_filter_family(list, af):
    return _fDpy.fd_ep_filter_family(list, af)
fd_ep_filter_family = _fDpy.fd_ep_filter_family

def fd_ep_clearflags(list, flags):
    return _fDpy.fd_ep_clearflags(list, flags)
fd_ep_clearflags = _fDpy.fd_ep_clearflags

def fd_ep_dump_one(preamble, ep):
    return _fDpy.fd_ep_dump_one(preamble, ep)
fd_ep_dump_one = _fDpy.fd_ep_dump_one

def fd_ep_dump(preamble, indent, eps):
    return _fDpy.fd_ep_dump(preamble, indent, eps)
fd_ep_dump = _fDpy.fd_ep_dump
class fd_app(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_app, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_app, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chain"] = _fDpy.fd_app_chain_set
    __swig_getmethods__["chain"] = _fDpy.fd_app_chain_get
    if _newclass:
        chain = _swig_property(_fDpy.fd_app_chain_get, _fDpy.fd_app_chain_set)
    __swig_getmethods__["flags"] = _fDpy.fd_app_flags_get
    if _newclass:
        flags = _swig_property(_fDpy.fd_app_flags_get)
    __swig_setmethods__["vndid"] = _fDpy.fd_app_vndid_set
    __swig_getmethods__["vndid"] = _fDpy.fd_app_vndid_get
    if _newclass:
        vndid = _swig_property(_fDpy.fd_app_vndid_get, _fDpy.fd_app_vndid_set)
    __swig_setmethods__["appid"] = _fDpy.fd_app_appid_set
    __swig_getmethods__["appid"] = _fDpy.fd_app_appid_get
    if _newclass:
        appid = _swig_property(_fDpy.fd_app_appid_get, _fDpy.fd_app_appid_set)

    def __init__(self):
        this = _fDpy.new_fd_app()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_app
    __del__ = lambda self: None
fd_app_swigregister = _fDpy.fd_app_swigregister
fd_app_swigregister(fd_app)

class fd_app_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_app_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_app_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["auth"] = _fDpy.fd_app_flags_auth_set
    __swig_getmethods__["auth"] = _fDpy.fd_app_flags_auth_get
    if _newclass:
        auth = _swig_property(_fDpy.fd_app_flags_auth_get, _fDpy.fd_app_flags_auth_set)
    __swig_setmethods__["acct"] = _fDpy.fd_app_flags_acct_set
    __swig_getmethods__["acct"] = _fDpy.fd_app_flags_acct_get
    if _newclass:
        acct = _swig_property(_fDpy.fd_app_flags_acct_get, _fDpy.fd_app_flags_acct_set)

    def __init__(self):
        this = _fDpy.new_fd_app_flags()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_app_flags
    __del__ = lambda self: None
fd_app_flags_swigregister = _fDpy.fd_app_flags_swigregister
fd_app_flags_swigregister(fd_app_flags)


def fd_app_merge(list, aid, vid, auth, acct):
    return _fDpy.fd_app_merge(list, aid, vid, auth, acct)
fd_app_merge = _fDpy.fd_app_merge

def fd_app_check(list, aid, detail):
    return _fDpy.fd_app_check(list, aid, detail)
fd_app_check = _fDpy.fd_app_check

def fd_app_check_common(list1, list2, common_found):
    return _fDpy.fd_app_check_common(list1, list2, common_found)
fd_app_check_common = _fDpy.fd_app_check_common

def fd_app_empty(list):
    return _fDpy.fd_app_empty(list)
fd_app_empty = _fDpy.fd_app_empty
HOOK_DATA_RECEIVED = _fDpy.HOOK_DATA_RECEIVED
HOOK_MESSAGE_RECEIVED = _fDpy.HOOK_MESSAGE_RECEIVED
HOOK_MESSAGE_LOCAL = _fDpy.HOOK_MESSAGE_LOCAL
HOOK_MESSAGE_SENDING = _fDpy.HOOK_MESSAGE_SENDING
HOOK_MESSAGE_SENT = _fDpy.HOOK_MESSAGE_SENT
HOOK_MESSAGE_FAILOVER = _fDpy.HOOK_MESSAGE_FAILOVER
HOOK_MESSAGE_PARSING_ERROR = _fDpy.HOOK_MESSAGE_PARSING_ERROR
HOOK_MESSAGE_ROUTING_ERROR = _fDpy.HOOK_MESSAGE_ROUTING_ERROR
HOOK_MESSAGE_ROUTING_FORWARD = _fDpy.HOOK_MESSAGE_ROUTING_FORWARD
HOOK_MESSAGE_ROUTING_LOCAL = _fDpy.HOOK_MESSAGE_ROUTING_LOCAL
HOOK_MESSAGE_DROPPED = _fDpy.HOOK_MESSAGE_DROPPED
HOOK_PEER_CONNECT_FAILED = _fDpy.HOOK_PEER_CONNECT_FAILED
HOOK_PEER_CONNECT_SUCCESS = _fDpy.HOOK_PEER_CONNECT_SUCCESS
HOOK_MESSAGE_PARSING_ERROR2 = _fDpy.HOOK_MESSAGE_PARSING_ERROR2
class fd_cnx_rcvdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_cnx_rcvdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_cnx_rcvdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _fDpy.fd_cnx_rcvdata_length_set
    __swig_getmethods__["length"] = _fDpy.fd_cnx_rcvdata_length_get
    if _newclass:
        length = _swig_property(_fDpy.fd_cnx_rcvdata_length_get, _fDpy.fd_cnx_rcvdata_length_set)
    __swig_setmethods__["buffer"] = _fDpy.fd_cnx_rcvdata_buffer_set
    __swig_getmethods__["buffer"] = _fDpy.fd_cnx_rcvdata_buffer_get
    if _newclass:
        buffer = _swig_property(_fDpy.fd_cnx_rcvdata_buffer_get, _fDpy.fd_cnx_rcvdata_buffer_set)

    def __init__(self):
        this = _fDpy.new_fd_cnx_rcvdata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_cnx_rcvdata
    __del__ = lambda self: None
fd_cnx_rcvdata_swigregister = _fDpy.fd_cnx_rcvdata_swigregister
fd_cnx_rcvdata_swigregister(fd_cnx_rcvdata)


def fd_hook_data_register(permsgdata_size, permsgdata_init_cb, permsgdata_fini_cb, new_handle):
    return _fDpy.fd_hook_data_register(permsgdata_size, permsgdata_init_cb, permsgdata_fini_cb, new_handle)
fd_hook_data_register = _fDpy.fd_hook_data_register

def fd_hook_register(type_mask, fd_hook_cb, regdata, data_hdl, handler):
    return _fDpy.fd_hook_register(type_mask, fd_hook_cb, regdata, data_hdl, handler)
fd_hook_register = _fDpy.fd_hook_register

def fd_hook_unregister(handler):
    return _fDpy.fd_hook_unregister(handler)
fd_hook_unregister = _fDpy.fd_hook_unregister

def fd_hook_get_request_pmd(data_hdl, answer):
    return _fDpy.fd_hook_get_request_pmd(data_hdl, answer)
fd_hook_get_request_pmd = _fDpy.fd_hook_get_request_pmd

def fd_hook_mask_helper(dummy):
    return _fDpy.fd_hook_mask_helper(dummy)
fd_hook_mask_helper = _fDpy.fd_hook_mask_helper
STAT_G_LOCAL = _fDpy.STAT_G_LOCAL
STAT_G_INCOMING = _fDpy.STAT_G_INCOMING
STAT_G_OUTGOING = _fDpy.STAT_G_OUTGOING
STAT_P_PSM = _fDpy.STAT_P_PSM
STAT_P_TOSEND = _fDpy.STAT_P_TOSEND

def fd_stat_getstats(stat, peer, current_count, limit_count, highest_count, total_count, total, blocking, last):
    return _fDpy.fd_stat_getstats(stat, peer, current_count, limit_count, highest_count, total_count, total, blocking, last)
fd_stat_getstats = _fDpy.fd_stat_getstats
class dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_dictionary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_dictionary
    __del__ = lambda self: None

    def dump(self):
        return _fDpy.dictionary_dump(self)

    def vendors_list(self):
        return _fDpy.dictionary_vendors_list(self)

    def new_obj(self, type, data, parent=None):
        return _fDpy.dictionary_new_obj(self, type, data, parent)

    def search(self, *args):
        return _fDpy.dictionary_search(self, *args)

    def error_cmd(self):
        return _fDpy.dictionary_error_cmd(self)
dictionary_swigregister = _fDpy.dictionary_swigregister
dictionary_swigregister(dictionary)

class dict_object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dict_object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dict_object, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dump(self):
        return _fDpy.dict_object_dump(self)

    def gettype(self):
        return _fDpy.dict_object_gettype(self)

    def getdict(self):
        return _fDpy.dict_object_getdict(self)

    def getval(self):
        return _fDpy.dict_object_getval(self)
    __swig_destroy__ = _fDpy.delete_dict_object
    __del__ = lambda self: None
dict_object_swigregister = _fDpy.dict_object_swigregister
dict_object_swigregister(dict_object)

class session_handler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session_handler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session_handler, name)
    __repr__ = _swig_repr

    def __init__(self, PyCb):
        this = _fDpy.new_session_handler(PyCb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_session_handler
    __del__ = lambda self: None

    def dump(self):
        return _fDpy.session_handler_dump(self)
session_handler_swigregister = _fDpy.session_handler_swigregister
session_handler_swigregister(session_handler)

class session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fDpy.new_session(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_session
    __del__ = lambda self: None

    def getsid(self):
        return _fDpy.session_getsid(self)

    def settimeout(self, seconds):
        return _fDpy.session_settimeout(self, seconds)

    def dump(self):
        return _fDpy.session_dump(self)

    def store(self, handler, DISOWN):
        return _fDpy.session_store(self, handler, DISOWN)

    def retrieve(self, handler):
        return _fDpy.session_retrieve(self, handler)
session_swigregister = _fDpy.session_swigregister
session_swigregister(session)

class rt_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rt_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rt_data, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_rt_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_rt_data
    __del__ = lambda self: None

    def add(self, peerid, realm):
        return _fDpy.rt_data_add(self, peerid, realm)

    def remove(self, STRING):
        return _fDpy.rt_data_remove(self, STRING)

    def error(self, peerid, STRING, rcode):
        return _fDpy.rt_data_error(self, peerid, STRING, rcode)

    def extract(self, score=0):
        return _fDpy.rt_data_extract(self, score)
rt_data_swigregister = _fDpy.rt_data_swigregister
rt_data_swigregister(rt_data)

class fd_rt_fwd_hdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_rt_fwd_hdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_rt_fwd_hdl, name)
    __repr__ = _swig_repr

    def __init__(self, PyCb, dir):
        this = _fDpy.new_fd_rt_fwd_hdl(PyCb, dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_rt_fwd_hdl
    __del__ = lambda self: None
fd_rt_fwd_hdl_swigregister = _fDpy.fd_rt_fwd_hdl_swigregister
fd_rt_fwd_hdl_swigregister(fd_rt_fwd_hdl)

class fd_rt_out_hdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_rt_out_hdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_rt_out_hdl, name)
    __repr__ = _swig_repr

    def __init__(self, PyCb, priority=0):
        this = _fDpy.new_fd_rt_out_hdl(PyCb, priority)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_rt_out_hdl
    __del__ = lambda self: None
fd_rt_out_hdl_swigregister = _fDpy.fd_rt_out_hdl_swigregister
fd_rt_out_hdl_swigregister(fd_rt_out_hdl)

class msg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fDpy.new_msg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_msg
    __del__ = lambda self: None

    def send(self, PyCb=None, data=None, PyExpCb=None, timeout=0):
        return _fDpy.msg_send(self, PyCb, data, PyExpCb, timeout)

    def create_answer(self, dict=None, flags=0):
        return _fDpy.msg_create_answer(self, dict, flags)

    def first_child(self):
        return _fDpy.msg_first_child(self)

    def children(self):
        return _fDpy.msg_children(self)

    def add_child(self, DISOWN, begin=0):
        return _fDpy.msg_add_child(self, DISOWN, begin)

    def search(self, what):
        return _fDpy.msg_search(self, what)

    def dump(self, tree=1):
        return _fDpy.msg_dump(self, tree)

    def model(self):
        return _fDpy.msg_model(self)

    def header(self):
        return _fDpy.msg_header(self)

    def get_query(self):
        return _fDpy.msg_get_query(self)

    def get_rtd(self):
        return _fDpy.msg_get_rtd(self)

    def set_rtd(self, DISOWN):
        return _fDpy.msg_set_rtd(self, DISOWN)

    def is_routable(self):
        return _fDpy.msg_is_routable(self)

    def is_request(self):
        return _fDpy.msg_is_request(self)

    def source(self):
        return _fDpy.msg_source(self)

    def get_session(self, dict=None):
        return _fDpy.msg_get_session(self, dict)

    def bufferize(self):
        return _fDpy.msg_bufferize(self)

    def parse_dict(self, dict=None):
        return _fDpy.msg_parse_dict(self, dict)

    def parse_rules(self, dict=None):
        return _fDpy.msg_parse_rules(self, dict)

    def update_length(self):
        return _fDpy.msg_update_length(self)

    def rescode_set(self, *args):
        return _fDpy.msg_rescode_set(self, *args)

    def add_origin(self, osi=0):
        return _fDpy.msg_add_origin(self, osi)
msg_swigregister = _fDpy.msg_swigregister
msg_swigregister(msg)

class avp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avp, name)
    __repr__ = _swig_repr

    def __init__(self, model=None, flags=0):
        this = _fDpy.new_avp(model, flags)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_avp
    __del__ = lambda self: None

    def first_child(self):
        return _fDpy.avp_first_child(self)

    def children(self):
        return _fDpy.avp_children(self)

    def add_next(self, avp):
        return _fDpy.avp_add_next(self, avp)

    def add_prev(self, avp):
        return _fDpy.avp_add_prev(self, avp)

    def add_child(self, DISOWN, begin=0):
        return _fDpy.avp_add_child(self, DISOWN, begin)

    def get_next(self):
        return _fDpy.avp_get_next(self)

    def dump(self, tree=1):
        return _fDpy.avp_dump(self, tree)

    def model(self):
        return _fDpy.avp_model(self)

    def header(self):
        return _fDpy.avp_header(self)

    def setval(self, val):
        return _fDpy.avp_setval(self, val)

    def update_length(self):
        return _fDpy.avp_update_length(self)
avp_swigregister = _fDpy.avp_swigregister
avp_swigregister(avp)

class disp_hdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disp_hdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disp_hdl, name)
    __repr__ = _swig_repr

    def __init__(self, PyCb, how, when):
        this = _fDpy.new_disp_hdl(PyCb, how, when)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_disp_hdl
    __del__ = lambda self: None
disp_hdl_swigregister = _fDpy.disp_hdl_swigregister
disp_hdl_swigregister(disp_hdl)

class fifo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fifo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fifo, name)
    __repr__ = _swig_repr

    def __init__(self, max=0):
        this = _fDpy.new_fifo(max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fifo
    __del__ = lambda self: None

    def move(self, to):
        return _fDpy.fifo_move(self, to)

    def length(self):
        return _fDpy.fifo_length(self)

    def post(self, item, type=None):
        return _fDpy.fifo_post(self, item, type)

    def get(self, type=None):
        return _fDpy.fifo_get(self, type)

    def tryget(self, type=None):
        return _fDpy.fifo_tryget(self, type)

    def timedget(self, seconds, type=None):
        return _fDpy.fifo_timedget(self, seconds, type)
fifo_swigregister = _fDpy.fifo_swigregister
fifo_swigregister(fifo)


def peer_search(STRING):
    return _fDpy.peer_search(STRING)
peer_search = _fDpy.peer_search

def peer_validate_register(PyCb):
    return _fDpy.peer_validate_register(PyCb)
peer_validate_register = _fDpy.peer_validate_register
class fd_hook_data_hdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_hook_data_hdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_hook_data_hdl, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_fd_hook_data_hdl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_hook_data_hdl
    __del__ = lambda self: None
fd_hook_data_hdl_swigregister = _fDpy.fd_hook_data_hdl_swigregister
fd_hook_data_hdl_swigregister(fd_hook_data_hdl)

class fd_hook_hdl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fd_hook_hdl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fd_hook_hdl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fDpy.new_fd_hook_hdl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_fd_hook_hdl
    __del__ = lambda self: None
fd_hook_hdl_swigregister = _fDpy.fd_hook_hdl_swigregister
fd_hook_hdl_swigregister(fd_hook_hdl)

class pthread_mutex_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pthread_mutex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pthread_mutex_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_pthread_mutex_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_pthread_mutex_t
    __del__ = lambda self: None

    def lock(self):
        return _fDpy.pthread_mutex_t_lock(self)

    def unlock(self):
        return _fDpy.pthread_mutex_t_unlock(self)
pthread_mutex_t_swigregister = _fDpy.pthread_mutex_t_swigregister
pthread_mutex_t_swigregister(pthread_mutex_t)

class pthread_cond_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pthread_cond_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pthread_cond_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_pthread_cond_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_pthread_cond_t
    __del__ = lambda self: None

    def signal(self):
        return _fDpy.pthread_cond_t_signal(self)

    def broadcast(self):
        return _fDpy.pthread_cond_t_broadcast(self)

    def wait(self, mutex):
        return _fDpy.pthread_cond_t_wait(self, mutex)

    def timedwait(self, mutex, seconds):
        return _fDpy.pthread_cond_t_timedwait(self, mutex, seconds)
pthread_cond_t_swigregister = _fDpy.pthread_cond_t_swigregister
pthread_cond_t_swigregister(pthread_cond_t)

class pthread_rwlock_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pthread_rwlock_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pthread_rwlock_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fDpy.new_pthread_rwlock_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fDpy.delete_pthread_rwlock_t
    __del__ = lambda self: None

    def rdlock(self):
        return _fDpy.pthread_rwlock_t_rdlock(self)

    def wrlock(self):
        return _fDpy.pthread_rwlock_t_wrlock(self)

    def unlock(self):
        return _fDpy.pthread_rwlock_t_unlock(self)
pthread_rwlock_t_swigregister = _fDpy.pthread_rwlock_t_swigregister
pthread_rwlock_t_swigregister(pthread_rwlock_t)

# This file is compatible with both classic and new-style classes.


